[
    {
        "id": "8475ab9.3d26058",
        "type": "tab",
        "label": "Web App Socket Router",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ca529822.9112f8",
        "type": "subflow",
        "name": "HTML",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "99bb1519.85fc18"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "f22a539a.a67b3",
        "type": "subflow",
        "name": "Core HTML",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "48e0f477.ea0e4c"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "8341090a.df9758",
        "type": "subflow",
        "name": "App HTML",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "a3eb7ad8.27c498"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Chill Detector",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "84d80994.260508",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "9cd5ff5e.caf86",
        "type": "mongodb3",
        "uri": "$(MONGODBIP)",
        "name": "blinky-lite",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "e71c9288.03dd3",
        "type": "websocket-listener",
        "path": "/rfill/websocket",
        "wholemsg": "false"
    },
    {
        "id": "8122cd09.50c05",
        "type": "websocket-listener",
        "path": "/oo-spec/websocket",
        "wholemsg": "false"
    },
    {
        "id": "76753e0f.fd4f2",
        "type": "websocket-listener",
        "path": "/oo-display/websocket",
        "wholemsg": "false"
    },
    {
        "id": "19e1e03d.925ca",
        "type": "websocket-listener",
        "path": "/comfort/websocket",
        "wholemsg": "false"
    },
    {
        "id": "65600820f71419b7",
        "type": "websocket-listener",
        "path": "/comfort-mobile/websocket",
        "wholemsg": "false"
    },
    {
        "id": "b9df3f26.ab53f",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n{{{payload.head}}}\n  </head>\n  <body>\n{{{payload.navBar}}}\n{{{payload.html.websocket}}}\n{{{payload.body}}}\n{{{payload.foot}}}\n  </body>\n</html>",
        "output": "str",
        "x": 1150,
        "y": 40,
        "wires": [
            [
                "d1d9e12b.926ff"
            ]
        ]
    },
    {
        "id": "895ba39c.86e59",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Foot",
        "field": "payload.foot",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div id=\"acknowledgeDialog\" title=\"Acknowledge\" class='card'>\n        <p class='card-title' id='acknowledgeDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='acknowledgeDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"optionDialog\" title=\"Option\" class='card'>\n        <p class='card-title' id='optionDialogTitle'>Choice</p>\n        <div class='card-body'>\n            <p class='tableText' id='optionDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"messageDialog\" title=\"Message\" class='card'>\n        <p class='card-title' id='messageDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='messageDialogText'>Text</p>\n        </div>\n    </div>\n    <script src=\"/scripts/popper.js\"></script>\n    <script src=\"/scripts/bootstrap.js\"></script>",
        "output": "str",
        "x": 690,
        "y": 40,
        "wires": [
            [
                "a9a62959.7c01e8"
            ]
        ]
    },
    {
        "id": "aa17ff35.7cdfd",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Head",
        "field": "payload.head",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" href=\"/img/favicon.ico?v=4\" type=\"image/x-icon\"/>\n    <title>{{payload.title}}</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui-timepicker-addon.css\"/>\n    <script src=\"/jquery/jquery.js\"></script>\n    <script src=\"/jquery/jquery-ui.js\"></script>\n    <script src=\"/jquery/jquery-ui-timepicker-addon.js\"></script>\n    <script src=\"/scripts/plotly-latest.min.js\"></script>\n    <script src=\"/scripts/pako.min.js\"></script>\n{{{payload.extraScripts}}}\n    <style>\n{{{payload.css}}}\n    </style>\n    <style>\n{{{payload.extraCss}}}\n    </style>\n    <script>\n{{{payload.utilityScripts}}}\n    </script>\n    <script>\n{{{payload.javascript}}}\n    </script>",
        "output": "str",
        "x": 570,
        "y": 40,
        "wires": [
            [
                "895ba39c.86e59"
            ]
        ]
    },
    {
        "id": "d1d9e12b.926ff",
        "type": "http response",
        "z": "ca529822.9112f8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1270,
        "y": 40,
        "wires": []
    },
    {
        "id": "c4ed2505.8c07e8",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Utility Scripts",
        "field": "payload.utilityScripts",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        var remoteApp = true;\n        var ws;\n        var userID = -1;\n        var useWebSocketsFlag = true;\n        var project = '{{{payload.project}}}';\n        var heartBeatImage = false;\n        var wsUri = '';\n        var wsConnected = false;\n\n        function setRemoteApp(remoteAppSet)\n        {\n            remoteApp  = remoteAppSet;\n        }\n        function webSocketConnected()\n        {\n            return wsConnected;\n        }\n        function useWebSockets(webSocketsFlag)\n        {\n            useWebSocketsFlag = webSocketsFlag;\n        }\n        function wsConnectC()\n        {\n            if (!useWebSocketsFlag)\n            {\n                return;\n            }\n            if (wsUri.length < 1)\n            {\n                var uri = window.location.href.split('://');\n                var wslead = 'ws://';\n                if (uri[0] == 'https') wslead = 'wss://';\n                var questionLocation = uri[1].indexOf('?');\n                if (questionLocation >= 0)\n                {\n                    uri[1] = uri[1].substring(0,questionLocation);\n//                    console.log(uri[1]);\n                }\n                if (uri[1].indexOf('/') < (uri[1].length - 1))\n                {\n                    wsUri = wslead + uri[1] + '/websocket';\n                }\n                else\n                {\n                    wsUri = wslead + uri[1] + 'websocket';\n                }\n            }\n            ws = new WebSocket(wsUri);\n            ws.onmessage = function(event)\n            {\n                onWebSocketMessage(JSON.parse(event.data));\n        \n            };\n            ws.onopen = function()\n            {\n                console.log(\"Websocket connected\");\n                wsConnected = true;\n                $('#webSocketStatus').html('Open');\n                $('#reOpenWebSocketButton').hide();\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n                onWebSocketOpen();\n            };\n            ws.onclose = function()\n            {\n                console.log(\"Websocket closed\");\n                wsConnected = false;\n                $('#webSocketStatus').html('Closed');\n                $('#reOpenWebSocketButton').show();\n                $('#webSocketStatusCard').show();\n                $('#webSocketStatusRow').css('padding-bottom','25px');\n                onWebSocketClose();\n                wsConnectC();\n            };\n        }\n\n        function getRandomInt(max)\n        {\n          return Math.floor(Math.random() * Math.floor(max));\n        }\n        $( document ).ready(function()\n        {\n            userID  = {{{payload.userID}}};\n            if (!useWebSocketsFlag)\n            {\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n            }\n            wsConnectC();\n            onDocumentReady();\n       });\n        $( function() \n        {\n            $( \"#acknowledgeDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() { $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n            $( \"#messageDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:[]\n                });\n        } );\n        function optionDialog(headerText, title, text, buttonTexts, buttonFunctions)\n        {\n            var buttonDefinitions = [];\n            for (var ii = 0; ii < buttonTexts.length; ++ii)\n            {\n                buttonDefinitions[ii] = \n                    {\n                        text: buttonTexts[ii],\n                        click: buttonFunctions[ii],\n                        showText: false\n                    };\n            }\n            $( \"#optionDialog\" ).dialog( \"option\", \"title\", headerText );   \n            $( \"#optionDialog\" ).dialog( \"option\", \"buttons\", buttonDefinitions);\n            $( \"#optionDialogTitle\" ).html(title);\n            $( \"#optionDialogText\" ).html(text);\n            $( \"#optionDialog\" ).dialog( \"open\" );\n        }\n        $( function() \n        {\n            $( \"#optionDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n        } );\n        function acknowledgeDialog(headerText, title, text)\n        {\n            $( \"#acknowledgeDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#acknowledgeDialogTitle\" ).html(title);\n            $( \"#acknowledgeDialogText\" ).html(text);\n            $( \"#acknowledgeDialog\" ).dialog( \"open\" );\n        }\n        function messageDialog(headerText, title, text)\n        {\n            $( \"#messageDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#messageDialogTitle\" ).html(title);\n            $( \"#messageDialogText\" ).html(text);\n            $( \"#messageDialog\" ).dialog( \"open\" );\n        }\n        function heartbeat()\n        {\n            heartBeatImage = !heartBeatImage;\n            var heartBeatImageSrc = '/img/heartRed.png';\n            if (heartBeatImage) heartBeatImageSrc = '/img/heartPink.png';\n            $('#heartBeatID').attr('src',heartBeatImageSrc);\n        }\n        function getCookie(extension)\n        {\n            var cookies = document.cookie.split(';');\n            var token = null;\n            var cookieName = project + extension + \"=\";\n            for (var icookie = 0; icookie < cookies.length; ++icookie)\n            {\n                var index = cookies[icookie].indexOf(cookieName);\n                if (index >= 0)\n                {\n                    token = cookies[icookie].substring(index + cookieName.length);\n                }\n            }\n            return token;\n        }\n        function sendActionMsg(topic,role,actionMsg)\n        {\n            var roleToken = \"\";\n            if (remoteApp) roleToken  = getCookie('Role');\n            if (roleToken == null)\n            {\n                location.reload();\n                return;\n            }\n            var webSocketMsg = \n            {\n                topic     : topic,\n                payload   : actionMsg,\n                userID    : userID,\n                token     : getCookie('Role'),\n                role      : role\n            };\n            ws.send(JSON.stringify(webSocketMsg));\n        }\n",
        "output": "str",
        "x": 430,
        "y": 40,
        "wires": [
            [
                "aa17ff35.7cdfd"
            ]
        ]
    },
    {
        "id": "99bb1519.85fc18",
        "type": "function",
        "z": "ca529822.9112f8",
        "name": "Get project name and userID",
        "func": "function getRandomInt(max)\n{\n  return Math.floor(Math.random() * Math.floor(max));\n}\nmsg.payload['project'] = global.get('project')\nmsg.payload['userID'] = getRandomInt(32768);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 220,
        "y": 40,
        "wires": [
            [
                "c4ed2505.8c07e8"
            ]
        ]
    },
    {
        "id": "a9a62959.7c01e8",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "html.websocket",
        "field": "payload.html.websocket",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- websocket status HTML -->\n    <div width=\"100%\">\n        <div class='row' id='webSocketStatusRow' style='padding-bottom: 0px;'>\n            <div class='col-md-12' align='center'>\n\n                <div class='card' id='webSocketStatusCard' >\n                    <p class='card-title'>Web Socket Status</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Websocket Status</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <button class='btn card-button btn-block big-text' id='reOpenWebSocketButton' onclick=\"wsConnectC()\">Re-open</button>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='webSocketStatus' >Closed</span>\n                                   </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n",
        "output": "str",
        "x": 840,
        "y": 40,
        "wires": [
            [
                "35ffcf83.1547"
            ]
        ]
    },
    {
        "id": "f46a4c46.e6b3a",
        "type": "mongodb3 in",
        "z": "ca529822.9112f8",
        "service": "_ext_",
        "configNode": "9cd5ff5e.caf86",
        "name": "",
        "collection": "accessLog",
        "operation": "insertOne",
        "x": 1090,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "35ffcf83.1547",
        "type": "function",
        "z": "ca529822.9112f8",
        "name": "IP filter",
        "func": "var ipfilter = [\n    \"127.0.0.16\"];\nvar ipAddress = ( msg.req.headers['x-forwarded-for'] || '').split(',').pop() || \n          msg.req.connection.remoteAddress || \n          msg.req.socket.remoteAddress || \n          msg.req.connection.socket.remoteAddress;\nif (ipAddress==undefined) return null;\nvar ipAddressSplit = ipAddress.split(\".\");\nfor (var ii =  0; ii < ipfilter.length; ++ii)\n{\n    var ipfilterSplit = ipfilter[ii].split(\".\");\n    if (ipAddress == ipfilter[ii])\n    { \n        return null;\n    }\n    if (ipfilterSplit[2] == '*')\n    {\n        if ((ipfilterSplit[0] == ipAddressSplit[0]) && (ipfilterSplit[1] == ipAddressSplit[1]))\n        {\n            return null;\n        }\n    }\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 990,
        "y": 40,
        "wires": [
            [
                "b9df3f26.ab53f",
                "41efb541.ee2eec"
            ]
        ]
    },
    {
        "id": "9ac12bdb.3cd258",
        "type": "function",
        "z": "ca529822.9112f8",
        "name": "parseIpRequest",
        "func": "var data = msg.payload.data.geo;\ndata['url'] = msg.extraInfo.url;\ndata['userID'] = msg.extraInfo.userID;\ndata['timeStamp'] = new Date().getTime();\nreturn {topic:'ipData', payload:data};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1040,
        "y": 180,
        "wires": [
            [
                "f46a4c46.e6b3a"
            ]
        ]
    },
    {
        "id": "de38cb39.638048",
        "type": "http request",
        "z": "ca529822.9112f8",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://tools.keycdn.com/geo.json?host={{{payload.ipAddress}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "basic",
        "x": 1030,
        "y": 140,
        "wires": [
            [
                "9ac12bdb.3cd258"
            ]
        ]
    },
    {
        "id": "41efb541.ee2eec",
        "type": "function",
        "z": "ca529822.9112f8",
        "name": "ClientInfo",
        "func": "var ipAddress = ( msg.req.headers['x-forwarded-for'] || '').split(',').pop() || \n          msg.req.connection.remoteAddress || \n          msg.req.socket.remoteAddress || \n          msg.req.connection.socket.remoteAddress;\nvar url = msg.req.url;\nvar header = {};\nheader['User-Agent'] = 'keycdn-tools:' + global.get('ipRefWeb');\nreturn {\n    topic:'clientInfo', \n    headers: header,\n    payload:{\n        ipAddress   : ipAddress\n    },\n    extraInfo       : {url:url, userID:msg.payload.userID},\n};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1020,
        "y": 100,
        "wires": [
            [
                "de38cb39.638048"
            ]
        ]
    },
    {
        "id": "8a439be9.030ab8",
        "type": "subflow:ca529822.9112f8",
        "z": "f22a539a.a67b3",
        "name": "",
        "x": 410,
        "y": 80,
        "wires": []
    },
    {
        "id": "48e0f477.ea0e4c",
        "type": "template",
        "z": "f22a539a.a67b3",
        "name": "CSS",
        "field": "payload.css",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "        :root \n        {\n          --color1: #434170;\n          --color2: #575491;\n          --color3: #9f9dc7;\n          --color4: #c6c2bb;\n          --color5: #fdc300;\n          --big-text-size :300%;\n          --bold-text :900;\n          --vert-pad : 25px;\n          --horz-pad : 25px;\n        }\n        body \n        {\n          background-color: white;\n          padding-left:25px;\n          padding-right:25px;\n        }\n        img \n        {\n          object-fit: contain;\n        }\n        a\n        {\n            color: white;\n        }\n        a:visited \n        { \n            color: var(--white);\n        }\n        a:hover \n        { \n            color: var(--color5);\n        }\n        .jumbotron \n        {\n          background-color: var(--color2) !important;\n          color:var(--white);\n          padding-bottom: 10px;\n          padding-top: 10px;\n        }\n        .jumbotron-title\n        {\n          color:var(--color5);\n        }\n        .jumbotron-button\n        {\n          color: white;\n          background-color: var(--color1);\n          font-weight: 900;\n        }\n        .card\n        {\n          background-color: var(--color2) !important;\n          text-align: center;\n          padding: 10px;\n        }\n        .card-body\n        {\n          background-color: var(--color3);\n        }\n        .card-button\n        {\n          color: var(--color5);\n          background-color: var(--color1) !important;\n          font-weight: bold;\n        }\n        .card-title\n        {\n          color: var(--color5);\n          font-weight: bold;\n        }\n        .card-text\n        {\n          color: white;\n          text-align: left;\n        }\n        .tableHeading\n        {\n          color:var(--color1);\n          font-weight: 900;\n        }\n        .tableText\n        {\n          color:var(--color1);\n          font-weight: 900;\n        }\n        .custom-select\n        {\n          color: white;\n          background-color: var(--color3);\n        \n        }\n        .form-control\n        {\n          text-align: center;\n        }\n        .checkbox-align\n        {\n          vertical-align: middle;\n          text-align: center;\n        }\n        .csv-linked\n        {\n            color: blue;\n        }\n        .csv-unlinked\n        {\n            color: red;\n        }\n        .vert-pad\n        {\n            padding-top:var(--vert-pad);;\n            padding-bottom:var(--vert-pad);;\n        }\n        .horz-pad\n        {\n            padding-left:var(--horz-pad);;\n            padding-right:var(--horz-pad);;\n        }\n        .big-text\n        {\n            font-size: var(--big-text-size);\n        }\n        .bold-text\n        {\n            font-weight: var(--bold-text);\n        }\n        .ui-dialog-titlebar-close \n        {\n            visibility: hidden;\n        }\n        div.ui-datepicker\n        {\n            font-size:30px;\n        }",
        "output": "str",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "b7076b42.4012e8"
            ]
        ]
    },
    {
        "id": "b7076b42.4012e8",
        "type": "template",
        "z": "f22a539a.a67b3",
        "name": "navBar",
        "field": "payload.navBar",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div class=\"jumbotron\" width=\"100%\">\n        <table width=\"100%\">\n            <tr>\n                <td style=\"text-align:left; vertical-align:middle;\"  width=\"20%\">\n                    <a href='/' >\n                        <img src=\"/img/appsYellow.png\" height=\"75px\"/>\n                    </a>                \n                </td>\n                <td width=\"60%\" style=\"text-align:center; vertical-align:middle;\">\n                    <h1 class=\"jumbotron-title big-text bold-text\">{{{payload.title}}}</h1>\n                </td>\n                <td style=\"text-align:right; vertical-align:middle;\" width=\"20%\">\n                    <a href='/core'><img src=\"/img/coreYellow.png\" height=\"75px\"/></a>\n                </td>\n            </tr>\n        </table>\n    </div>\n    \n",
        "output": "str",
        "x": 280,
        "y": 80,
        "wires": [
            [
                "8a439be9.030ab8"
            ]
        ]
    },
    {
        "id": "9460eaf0.da7628",
        "type": "subflow:ca529822.9112f8",
        "z": "8341090a.df9758",
        "name": "",
        "x": 410,
        "y": 80,
        "wires": []
    },
    {
        "id": "a3eb7ad8.27c498",
        "type": "template",
        "z": "8341090a.df9758",
        "name": "CSS",
        "field": "payload.css",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "        :root \n        {\n          --color1: #434170;\n          --color2: #575491;\n          --color3: #9f9dc7;\n          --color4: #c6c2bb;\n          --color5: #fdc300;\n          --big-text-size :300%;\n          --bold-text :900;\n          --vert-pad : 25px;\n          --horz-pad : 25px;\n        }\n        body \n        {\n          background-color: white !important;\n          padding-left:25px;\n          padding-right:25px;\n        }\n        \n        img \n        {\n          object-fit: contain;\n        }\n        a\n        {\n            color: white;\n        }\n        a:visited \n        { \n            color: var(--white);\n        }\n        a:hover \n        { \n            color: var(--color5);\n        }\n\n        .jumbotron \n        {\n          background-color: var(--color2) !important;\n          color: white;\n          padding-top:25px;\n          padding-bottom:25px;\n        }\n        .jumbotron-title\n        {\n          color:var(--color5);\n        }\n        .jumbotron-button\n        {\n          color: white;\n          background-color: var(--color1);\n       }\n        .card\n        {\n          background-color: var(--color2) !important;\n          text-align: center;\n        }\n        .card-body\n        {\n          background-color: var(--color3);;\n        }\n        .card-button\n        {\n          color: var(--color5) !important;\n          background-color: var(--color1) !important;\n          font-weight: bold;\n        }\n        .card-title\n        {\n          color: var(--color5);\n          font-weight: var(--bold-text);\n          font-size: var(--big-text-size);\n         }\n        .card-text\n        {\n          color: white;\n          text-align: left;\n          font-size: var(--big-text-size);\n        }\n        .danger-card\n        {\n          background-color: yellow !important;\n          text-align: center;\n        }\n        .danger-card-body\n        {\n          background-color: yellow;\n        }\n        .danger-card-button\n        {\n          color: yellow !important;\n          background-color: red !important;\n          font-weight: bold;\n        }\n        .danger-card-title\n        {\n          color: red;\n          font-weight: var(--bold-text);\n          font-size: var(--big-text-size);\n         }\n        .danger-card-text\n        {\n          color: white;\n          text-align: left;\n          font-size: var(--big-text-size);\n        }\n        .tableHeading\n        {\n          color:var(--container-title-color);\n        }\n        .tableText\n        {\n          color:var(--container-text-color);\n          font-size: var(--big-text-size);\n        }\n       .vert-pad\n        {\n            padding-top:var(--vert-pad);;\n            padding-bottom:var(--vert-pad);;\n        }\n        .horz-pad\n        {\n            padding-left:var(--horz-pad);;\n            padding-right:var(--horz-pad);;\n        }\n        .big-text\n        {\n            font-size: var(--big-text-size);\n        }\n        .bold-text\n        {\n            font-weight: var(--bold-text);\n        }\n       .ui-dialog-titlebar-close \n        {\n            visibility: hidden;\n        }\n        input.inputLarger \n        { \n            transform: scale(3); \n            margin: 1px;\n        }\n        .googleSlide4by3-container \n        {\n            position: relative;\n            overflow: hidden;\n            padding-top: 75.0%;\n        }\n        .googleSlide4by3-iframe {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            border: 0;\n        }        \n        .custom-select\n        {\n            color: black;\n            background-color: white;\n            height:80px;\n            line-height:70px;\n        }\n",
        "output": "str",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "6f95e75a.75d6d8"
            ]
        ]
    },
    {
        "id": "6f95e75a.75d6d8",
        "type": "template",
        "z": "8341090a.df9758",
        "name": "navBar",
        "field": "payload.navBar",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- navBar -->\n    <div class=\"jumbotron\" width=\"100%\">\n        <table width=\"100%\">\n            <tr>\n                <td style=\"text-align:left; vertical-align:middle;\"  width=\"20%\">\n                    <a href='https://www.maxiv.lu.se/' >\n                        <img src=\"/img/MAX-IVYellow.png\" height=\"75px\"/>\n                    </a>                \n                </td>\n                <td width=\"60%\" style=\"text-align:center; vertical-align:middle;\">\n                    <h1 class=\"jumbotron-title big-text bold-text\">\n                        <img src=\"/img/{{{payload.navBarIcon}}}\" height=\"75px\" style=\"padding-right:20px;\"/><span>{{{payload.title}}}</span>\n                    </h1>\n                </td>\n                <td style=\"text-align:right; vertical-align:middle;\" width=\"20%\">\n                    <a href='/' >\n                        <img src=\"/img/appsYellow.png\" height=\"75px\"/>\n                    </a>                \n                </td>\n            </tr>\n        </table>\n    </div>",
        "output": "str",
        "x": 280,
        "y": 80,
        "wires": [
            [
                "9460eaf0.da7628"
            ]
        ]
    },
    {
        "id": "f62ae826.1bfb58",
        "type": "mqtt in",
        "z": "8475ab9.3d26058",
        "name": "Subscribe Readings",
        "topic": "$(ARCHIVETOPIC)",
        "qos": "0",
        "datatype": "auto",
        "broker": "84d80994.260508",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 280,
        "wires": [
            [
                "7a299117.69d3"
            ]
        ]
    },
    {
        "id": "7a299117.69d3",
        "type": "json",
        "z": "8475ab9.3d26058",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 280,
        "wires": [
            [
                "764116fd.f6e648"
            ]
        ]
    },
    {
        "id": "81c39fe.b208a6",
        "type": "switch",
        "z": "8475ab9.3d26058",
        "name": "",
        "property": "payload.mqttDevice.deviceType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "osc-over",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 280,
        "wires": [
            [
                "5f767381.0ac26c"
            ]
        ]
    },
    {
        "id": "764116fd.f6e648",
        "type": "function",
        "z": "8475ab9.3d26058",
        "name": "Split MQTT topic",
        "func": "var mqttArray = msg.topic.split('/');\nvar device = \n{\n    project     : mqttArray[0],\n    deviceType  : mqttArray[1],\n    name        : mqttArray[2],\n    prop        : mqttArray[3],\n};\nreturn {topic : msg.topic, payload:{topic:'readings', mqttDevice : device, payload:msg.payload}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 280,
        "wires": [
            [
                "81c39fe.b208a6"
            ]
        ]
    },
    {
        "id": "5f767381.0ac26c",
        "type": "link out",
        "z": "8475ab9.3d26058",
        "name": "osc-over mqtt",
        "links": [
            "335f81b8.1e7d4e",
            "7cb302d7.f1e10c",
            "7e343bf8.8fec14",
            "f398a496.d050b8",
            "17473ed6142fb880",
            "ef12416b3421f309"
        ],
        "x": 795,
        "y": 280,
        "wires": []
    },
    {
        "id": "68378c41.1d2814",
        "type": "websocket out",
        "z": "8475ab9.3d26058",
        "name": "/rfill/websocket",
        "server": "e71c9288.03dd3",
        "client": "",
        "x": 1020,
        "y": 240,
        "wires": []
    },
    {
        "id": "7e343bf8.8fec14",
        "type": "link in",
        "z": "8475ab9.3d26058",
        "name": "rfill input socket",
        "links": [
            "5f767381.0ac26c"
        ],
        "x": 895,
        "y": 240,
        "wires": [
            [
                "68378c41.1d2814"
            ]
        ]
    },
    {
        "id": "3cce4d4f.d208c2",
        "type": "websocket out",
        "z": "8475ab9.3d26058",
        "name": "/oo-spec/websocket",
        "server": "8122cd09.50c05",
        "client": "",
        "x": 1040,
        "y": 300,
        "wires": []
    },
    {
        "id": "7cb302d7.f1e10c",
        "type": "link in",
        "z": "8475ab9.3d26058",
        "name": "oo-spec input socket",
        "links": [
            "5f767381.0ac26c"
        ],
        "x": 895,
        "y": 300,
        "wires": [
            [
                "3cce4d4f.d208c2"
            ]
        ]
    },
    {
        "id": "b425c999.d3b9a8",
        "type": "websocket out",
        "z": "8475ab9.3d26058",
        "name": "/oo-display/websocket",
        "server": "76753e0f.fd4f2",
        "client": "",
        "x": 1040,
        "y": 360,
        "wires": []
    },
    {
        "id": "335f81b8.1e7d4e",
        "type": "link in",
        "z": "8475ab9.3d26058",
        "name": "oo-display input socket",
        "links": [
            "5f767381.0ac26c"
        ],
        "x": 895,
        "y": 360,
        "wires": [
            [
                "b425c999.d3b9a8"
            ]
        ]
    },
    {
        "id": "59d838e0.045ee8",
        "type": "websocket out",
        "z": "8475ab9.3d26058",
        "name": "/comfort/websocket",
        "server": "19e1e03d.925ca",
        "client": "",
        "x": 1030,
        "y": 180,
        "wires": []
    },
    {
        "id": "f398a496.d050b8",
        "type": "link in",
        "z": "8475ab9.3d26058",
        "name": "comfort input socket",
        "links": [
            "5f767381.0ac26c"
        ],
        "x": 895,
        "y": 180,
        "wires": [
            [
                "59d838e0.045ee8"
            ]
        ]
    },
    {
        "id": "d01080aa74c5d557",
        "type": "http in",
        "z": "8475ab9.3d26058",
        "name": "/",
        "url": "/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "79810132a62f63f0"
            ]
        ]
    },
    {
        "id": "840bed14ecefb890",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Beam Stability Apps",
        "output": "str",
        "x": 390,
        "y": 500,
        "wires": [
            [
                "1761446996dd9998"
            ]
        ]
    },
    {
        "id": "a9644ab4e735c284",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "javascript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        useWebSockets(false);\n        function onDocumentReady()\n        {\n        }\n        function onWebSocketOpen()\n        {\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n        }\n\n",
        "output": "str",
        "x": 640,
        "y": 500,
        "wires": [
            [
                "f0c9f073333e44d2"
            ]
        ]
    },
    {
        "id": "1761446996dd9998",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Body HTML -->\n    <div class='container' width=\"100%\">\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/comfort-mobile?name=r3\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"30%\" align='center'> <img src=\"/img/comfortYellow.png\" height=\"70px\"/></td>\n                            <td width=\"70%\" align=\"left\">R3 Comfort Mobile</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/comfort?name=r3\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"30%\" align='center'> <img src=\"/img/comfortYellow.png\" height=\"70px\"/></td>\n                            <td width=\"70%\" align=\"left\">R3 Comfort Desktop</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/oo-spec?name=r3\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"30%\" align='center'> <img src=\"/img/yellowSpectrum.png\" height=\"70px\"/></td>\n                            <td width=\"70%\" align=\"left\">R3 Spectrogram</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/rfill?name=r3\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"30%\" align='center'> <img src=\"/img/bucketYellow.png\" height=\"70px\"/></td>\n                            <td width=\"70%\" align=\"left\">R3 Fill Pattern</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n         <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"https://status.maxiv.lu.se/status/html/\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"30%\" align='center'> <img src=\"/img/MAX-IVYellow.png\" height=\"70px\"/></td>\n                            <td width=\"70%\" align=\"left\">MAxIV Machine Status</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n  </div>\n",
        "output": "str",
        "x": 510,
        "y": 500,
        "wires": [
            [
                "a9644ab4e735c284"
            ]
        ]
    },
    {
        "id": "f0c9f073333e44d2",
        "type": "subflow:8341090a.df9758",
        "z": "8475ab9.3d26058",
        "name": "",
        "x": 790,
        "y": 500,
        "wires": []
    },
    {
        "id": "79810132a62f63f0",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "appsYellow.png",
        "output": "str",
        "x": 250,
        "y": 500,
        "wires": [
            [
                "840bed14ecefb890"
            ]
        ]
    },
    {
        "id": "76c0c97cbedda89a",
        "type": "inject",
        "z": "8475ab9.3d26058",
        "name": "project",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "project",
        "payload": "PROJECT",
        "payloadType": "env",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "3a798da899347b6c"
            ]
        ]
    },
    {
        "id": "3a798da899347b6c",
        "type": "function",
        "z": "8475ab9.3d26058",
        "name": "Save Project Name",
        "func": "global.set(msg.topic,msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "69ab10d8298e6b87",
        "type": "inject",
        "z": "8475ab9.3d26058",
        "name": "maxDbSize",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "maxDbSize",
        "payload": "MAXDBSIZE",
        "payloadType": "env",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "189077d3713a0457"
            ]
        ]
    },
    {
        "id": "189077d3713a0457",
        "type": "function",
        "z": "8475ab9.3d26058",
        "name": "Save maxDbSize",
        "func": "global.set(msg.topic,Number(msg.payload));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "350892a823455fe0",
        "type": "inject",
        "z": "8475ab9.3d26058",
        "name": "ipRefWeb",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "ipRefWeb",
        "payload": "IPREFWEB",
        "payloadType": "env",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "7ffd6a9444a51318"
            ]
        ]
    },
    {
        "id": "7ffd6a9444a51318",
        "type": "function",
        "z": "8475ab9.3d26058",
        "name": "Save ipRefWeb",
        "func": "global.set(msg.topic,msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "20c416e338aa7afa",
        "type": "inject",
        "z": "8475ab9.3d26058",
        "name": "Everyday at 6:30am",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 06 * * *",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1000,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "328fa260fc74e0d1",
        "type": "exec",
        "z": "8475ab9.3d26058",
        "command": "sudo date -s \"$(wget -qSO- --max-redirect=0 google.com 2>&1 | grep Date: | cut -d' ' -f5-8)Z\"",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Set Time",
        "x": 1230,
        "y": 80,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "fd6246700383070d",
        "type": "comment",
        "z": "8475ab9.3d26058",
        "name": "MaxIV blocks auto time so first sudo timedatectl set-ntp 0",
        "info": "",
        "x": 1090,
        "y": 20,
        "wires": []
    },
    {
        "id": "7e44494f6165386e",
        "type": "http in",
        "z": "8475ab9.3d26058",
        "name": "/rfill",
        "url": "/rfill",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "0c6df26dca530eca"
            ]
        ]
    },
    {
        "id": "0c6df26dca530eca",
        "type": "function",
        "z": "8475ab9.3d26058",
        "name": "Set Name And Device Type",
        "func": "msg.payload['script'] = {};\nmsg.payload['script']['name'] = msg.payload.name\nmsg.payload['script']['deviceType'] = 'osc-over';\nmsg.payload['script']['project'] = global.get('project');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 340,
        "y": 620,
        "wires": [
            [
                "2f89cc634b2a7290"
            ]
        ]
    },
    {
        "id": "d39d29c8bd79c6cd",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "Set Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "R3 Fill Pattern",
        "output": "str",
        "x": 280,
        "y": 700,
        "wires": [
            [
                "883a337d3e6ceb4a"
            ]
        ]
    },
    {
        "id": "883a337d3e6ceb4a",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "script.global",
        "field": "payload.script.global",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Global Javascript\n        useWebSockets(true);\n        var mqttDevice = null;\n        var device = null;\n        var pingInterval = 5000;\n        var lastPing = 0;\n\n        var restfulDevice = \n        {\n            deviceType  : '{{{payload.script.deviceType}}}',\n            name        : '{{{payload.script.name}}}',\n            project     : '{{{payload.script.project}}}'\n        };\n\n        function onDocumentReady()\n        {\n            setRemoteApp(false);\n            if (remoteApp)\n            {\n                getCreds();\n                setInterval(function(){getCreds();}, 1000);\n            }\n            else\n            {\n                $('#userCardId').hide();\n            }\n        }\n        function onWebSocketOpen()\n        {\n            acknowledgeDialog('Alert', 'Wait!', 'Contacting the Mother Ship...');\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n            switch(msg.topic)\n            {\n                case 'readings':\n                    if ((msg.mqttDevice.name == restfulDevice.name) && (msg.mqttDevice.deviceType == restfulDevice.deviceType)  && (msg.mqttDevice.project == restfulDevice.project) )\n                    {\n                        lastPing = new Date().getTime();\n                        heartbeat();\n                        device = JSON.parse(pako.inflate(msg.payload, { to: 'string' }));\n                        mqttDevice = msg.mqttDevice;\n                        updateDmaReadings();\n                    }\n                    break;\n                case 'readDatabase':\n                    if (msg.userID == userID)\n                    {\n                    }\n                    break;\n                case 'renew':\n                    if (msg.userID == userID)\n                    {\n                        updateCookie(msg);\n                    }\n                    break;\n                case 'permissionError':\n                    if (msg.userID == userID)\n                    {\n                        acknowledgeDialog('Permission', 'Error', msg.payload);\n                    }\n                    break;\n                case 'loginExpired':\n                    if (msg.userID == userID)\n                    {\n                       location.reload();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        function updateDmaReadings()\n        {\n            $('#linkQualityId').text(device.linkQuality.value);\n            $('#signalLevelId').text(device.signalLevel.value);\n            phasePlot();\n            modePlot();\n            bunchPlot();\n            dataGlobal();\n            $( \"#acknowledgeDialog\" ).dialog('close');\n        }\n        function dataGlobal()\n        {\n            $(\"#beamCurrent\").text(Math.round(device.beamCurrent.value * 100.0) / 100.0);\n        }\n        function phasePlot()\n        {\n            var normalCardStyle = '#575491';\n            var normalCardTitleStyle = '#fdc300';\n            var normalCardBodyStyle = '#9f9dc7';\n            var normalTraceColor = '#575491';\n            var alarmCardStyle = 'red';\n            var alarmCardTitleStyle = 'white';\n            var alarmCardBodyStyle = 'pink';\n            var alarmTraceColor = 'red';\n            \n            var cardStyle = normalCardStyle;\n            var cardTitleStyle = normalCardTitleStyle;\n            var cardBodyStyle = normalCardBodyStyle;\n            var traceColor = normalTraceColor;\n            if (device.beamCurrent.value > 50.0)\n            {\n                if (device.maxDipoleModeAmp.value > device.maxDipoleModeAmp.alarm.limits.high)\n                {\n                    cardStyle = alarmCardStyle;\n                    cardTitleStyle = alarmCardTitleStyle;\n                    cardBodyStyle = alarmCardBodyStyle;\n                    traceColor = alarmTraceColor;\n                }\n            }\n            $('#phaseCard').css('background-color',cardStyle);\n            $('#phaseCardBody').css('background-color',cardBodyStyle);\n            $('#phaseCardTitle').css('color',cardTitleStyle);\n            var ymax = device.maxDipoleModeAmp.alarm.limits.hihi;\n            var layout =\n            {   \n                title: 'Differential Phase',\n                showlegend: false,\n                xaxis: {title: 'Bunch Number'},\n                yaxis: {title: 'phase (deg)', range: [-ymax,ymax]}\n            };\n            var traceData = [{}];\n            var phase = device.phase.value;\n            traceData[0] = {x: [],y: [],name: 'phase', yaxis: 'y1',type: 'bar',marker: {color: traceColor}};\n            for (var ii = 0; ii < phase[0].length; ++ii)\n            {\n                traceData[0].x[ii] = phase[0][ii];\n                traceData[0].y[ii] = phase[1][ii];\n            }\n            Plotly.newPlot('phasePlot', traceData, layout);\n        }\n        function modePlot()\n        {\n            var normalCardStyle = '#575491';\n            var normalCardTitleStyle = '#fdc300';\n            var normalCardBodyStyle = '#9f9dc7';\n            var normalTraceColor = '#575491';\n            var alarmCardStyle = 'red';\n            var alarmCardTitleStyle = 'white';\n            var alarmCardBodyStyle = 'pink';\n            var alarmTraceColor = 'red';\n            \n            var cardStyle = normalCardStyle;\n            var cardTitleStyle = normalCardTitleStyle;\n            var cardBodyStyle = normalCardBodyStyle;\n            var traceColor = normalTraceColor;\n            if (device.beamCurrent.value > 50.0)\n            {\n                if (device.maxDipoleModeAmp.value > device.maxDipoleModeAmp.alarm.limits.high)\n                {\n                    cardStyle = alarmCardStyle;\n                    cardTitleStyle = alarmCardTitleStyle;\n                    cardBodyStyle = alarmCardBodyStyle;\n                    traceColor = alarmTraceColor;\n                }\n            }\n            $('#modeSpectrumCard').css('background-color',cardStyle);\n            $('#modeSpectrumCardBody').css('background-color',cardBodyStyle);\n            $('#modeSpectrumCardTitle').css('color',cardTitleStyle);\n            var ymax = device.maxDipoleModeAmp.alarm.limits.high;\n            var yscale = Math.floor(Math.log10(ymax)) + 1;\n            var layout =\n            {   \n                title: 'Mode Spectrum',\n                xaxis: {title: 'Mode Number'},\n                yaxis: {title: 'Amplitude (deg)', type: 'log', range: [-1,yscale]},\n                shapes: [{\n                            type: 'rect',\n                            xref: 'paper',\n                            x0: 0,\n                            x1: 1,\n                            yref: 'y',\n                            y0: ymax,\n                            y1: ymax + .1,\n                            line: { width: 0},\n                            fillcolor: 'red'\n                        }]\n            };\n            var modeM = device.modeM.value;\n            var traceData = [{}];\n            traceData[0] = {x: [],y: [],name: 'mode', yaxis: 'y1',type: 'bar',marker: {color: traceColor}};\n            for (var ii = 0; ii < modeM[0].length; ++ii)\n            {\n                traceData[0].x[ii] = modeM[0][ii];\n                traceData[0].y[ii] = modeM[1][ii];\n            }\n            Plotly.newPlot('modePlot', traceData, layout);\n        }\n        function bunchPlot()\n        {\n            var layout =\n            {   \n                title: 'Bunch Intensity',\n                showlegend: false,\n                xaxis: {title: 'Bunch Number'},\n                yaxis: {title: 'Bunch Current (mA)'},\n            };\n            var bunchCurrent = device.bunchCurrent.value;\n            var traceData = [{}];\n            traceData[0] = {x: [],y: [],name: 'bunch Intensity', yaxis: 'y1',type: 'bar',marker: {color: '#575491'}};\n            for (var ii = 0; ii < bunchCurrent[0].length; ++ii)\n            {\n                traceData[0].x[ii] = bunchCurrent[0][ii];\n                traceData[0].y[ii] = bunchCurrent[1][ii];\n            }\n            Plotly.newPlot('bunchPlot', traceData, layout);\n        }\n        \n",
        "output": "str",
        "x": 650,
        "y": 620,
        "wires": [
            [
                "edc86848f45a3e3e"
            ]
        ]
    },
    {
        "id": "58a3518b1874b6ff",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "javascript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "{{{payload.script.global}}}\n{{{payload.script.user}}}\n",
        "output": "str",
        "x": 640,
        "y": 700,
        "wires": [
            [
                "eeede23579032bf8"
            ]
        ]
    },
    {
        "id": "51279aede4292953",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "{{{payload.html.dashboard}}}\n    <div width=\"100%\">\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.user}}}\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.wifimon}}}\n            </div>\n        </div>\n    </div>",
        "output": "str",
        "x": 950,
        "y": 740,
        "wires": [
            [
                "acb31306bff8279d"
            ]
        ]
    },
    {
        "id": "a156c3e815bb4eea",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "html.wifimon",
        "field": "payload.html.wifimon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n                <div class='card'>\n                    <p class='card-title'>WiFi Connection</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Device Update</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <img src='/img/heartRed.png' id='heartBeatID' width='100px' height='100px'/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Signal Level (dBm)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='signalLevelId' >-100</span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Link Quality (/70)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='linkQualityId' >-1</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 970,
        "y": 700,
        "wires": [
            [
                "51279aede4292953"
            ]
        ]
    },
    {
        "id": "eeede23579032bf8",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "html.dashboard",
        "field": "payload.html.dashboard",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div width='100%' style='padding-bottom: 25px;'>\n        <div class='card'>\n            <table width='100%'>\n                <tr>\n                    <td width='60%' align=\"left\">\n                        <span class=\"card-title\">Beam current (mA)</span>\n                    </td>\n                    <td width='40%' align=\"right\">\n                        <span class=\"card-title\" id=\"beamCurrent\"></span>\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n    <div style='padding-bottom: 25px;'>\n        <div class='card'  id='modeSpectrumCard'>\n            <p class=\"card-title\"  id='modeSpectrumCardTitle'>Mode Spectrum</p>\n            <div class='card-body' id='modeSpectrumCardBody'>\n                <div id=\"modePlot\"></div>\n            </div>\n        </div>\n    </div>\n    <div style='padding-bottom: 25px;'>\n        <div class='card' id='phaseCard'>\n            <p class='card-title' id='phaseCardTitle'>Differential Phase</p>\n            <div class='card-body' id='phaseCardBody'>\n                <div id=\"phasePlot\"></div>\n            </div>\n        </div>\n    </div>\n    <div style='padding-bottom: 25px;'>\n        <div class='card'>\n            <p class='card-title'>Bunch Intensity</p>\n            <div class='card-body'>\n                <div id=\"bunchPlot\"></div>\n            </div>\n        </div>\n    </div>\n",
        "output": "str",
        "x": 980,
        "y": 620,
        "wires": [
            [
                "bf6a841ea3768c13"
            ]
        ]
    },
    {
        "id": "2f89cc634b2a7290",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "bucketYellow.png",
        "output": "str",
        "x": 290,
        "y": 660,
        "wires": [
            [
                "d39d29c8bd79c6cd"
            ]
        ]
    },
    {
        "id": "bf6a841ea3768c13",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "html.user",
        "field": "payload.html.user",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "                <div class='card' id='userCardId'>\n                    <div class='card-body' align=\"center\">\n                        <table width=\"100%\">\n                            <tr>\n                                <td  align=\"left\">\n                                     <span class='card-text' style='color:black;'>User:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='usernameId'></span>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td  align=\"left\">\n                                    <span class='card-text' style='color:black;'>Time left:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='expTimeId'></span>\n                                </td>\n                            </tr>\n                        </table>\n                        <table width=\"100%\">\n                            <tr>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"renew()\" >Renew</button>\n                                </td>\n                                <td width=\"10%\"></td>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"logout()\" >Logout</button>\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 960,
        "y": 660,
        "wires": [
            [
                "a156c3e815bb4eea"
            ]
        ]
    },
    {
        "id": "edc86848f45a3e3e",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "script.user",
        "field": "payload.script.user",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        function getCreds()\n        {\n            var now = new Date().getTime();\n            var expDate = Number(getCookie('ExpDate'));\n            if (expDate > 0)\n            {\n                expDate = expDate - now;\n                if(expDate < 0)\n                {\n                    logout();\n                }\n                else\n                {\n                    var hours = Math.floor(expDate / 3600000);\n                    var minutes = expDate - hours * 3600000;\n                    minutes = Math.floor(minutes / 60000);\n                    var seconds = expDate - (hours * 3600000) - (minutes * 60000);\n                    seconds = Math.floor(seconds / 1000);\n                    hours = hours.toString();\n                    if (hours.length == 1) hours = '0' + hours; \n                    minutes = minutes.toString();\n                    if (minutes.length == 1) minutes = '0' + minutes; \n                    seconds = seconds.toString();\n                    if (seconds.length == 1) seconds = '0' + seconds; \n                    var timeString = hours + ':' + minutes + ':' + seconds;\n                    $('#usernameId').text(getCookie('Username'));\n                    $('#expTimeId').text(timeString);\n                }\n            }\n            else\n            {\n                $('#usernameId').text(getCookie('Username'));\n                $('#expTimeId').text('Forever');\n            }\n        }\n        function logout()\n        {\n            document.cookie = project + \"Role= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"ExpDate= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"Username= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            window.location.href = \"/\";\n        }\n        function renew()\n        {\n            var actionMsg = {};\n            sendActionMsg('renew', 'renew', actionMsg);\n        }\n        function updateCookie(msg)\n        {\n            document.cookie = project + \"Role=\" + msg.role;\n            document.cookie = project + \"ExpDate=\" + msg.expDate;\n            document.cookie = project + \"Username=\" + msg.username;\n        }\n        function downloadToken()\n        {\n            downloadString(getCookie(\"Role\"), \"text/plain\", project + \"-token.txt\");\n        }\n// from https://gist.github.com/danallison/3ec9d5314788b337b682\n        function downloadString(text, fileType, fileName) \n        {\n            var blob = new Blob([text], { type: fileType });\n            \n            var a = document.createElement('a');\n            a.download = fileName;\n            a.href = URL.createObjectURL(blob);\n            a.dataset.downloadurl = [fileType, a.download, a.href].join(':');\n            a.style.display = \"none\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);\n        }",
        "output": "str",
        "x": 650,
        "y": 660,
        "wires": [
            [
                "58a3518b1874b6ff"
            ]
        ]
    },
    {
        "id": "acb31306bff8279d",
        "type": "subflow:8341090a.df9758",
        "z": "8475ab9.3d26058",
        "name": "",
        "x": 1310,
        "y": 740,
        "wires": []
    },
    {
        "id": "d62739169589089f",
        "type": "http in",
        "z": "8475ab9.3d26058",
        "name": "/oo-spec",
        "url": "/oo-spec",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 820,
        "wires": [
            [
                "e2535316a87d1308"
            ]
        ]
    },
    {
        "id": "e2535316a87d1308",
        "type": "function",
        "z": "8475ab9.3d26058",
        "name": "Set Name And Device Type",
        "func": "msg.payload['script'] = {};\nmsg.payload['script']['name'] = msg.payload.name\nmsg.payload['script']['deviceType'] = 'osc-over';\nmsg.payload['script']['project'] = global.get('project');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 340,
        "y": 820,
        "wires": [
            [
                "355c0ee49092e965"
            ]
        ]
    },
    {
        "id": "94078219625670da",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "Set Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Spectrogram {{{payload.script.name}}}",
        "output": "str",
        "x": 280,
        "y": 900,
        "wires": [
            [
                "bdda2187c7654339"
            ]
        ]
    },
    {
        "id": "338ce6d79ff0ef34",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "javascript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "{{{payload.script.global}}}\n{{{payload.script.user}}}\n",
        "output": "str",
        "x": 640,
        "y": 900,
        "wires": [
            [
                "548f4476d5182f4b"
            ]
        ]
    },
    {
        "id": "ab3e836979097377",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "{{{payload.html.dashboard}}}\n    <div width=\"100%\">\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.user}}}\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.wifimon}}}\n            </div>\n        </div>\n    </div>",
        "output": "str",
        "x": 950,
        "y": 940,
        "wires": [
            [
                "91bb94404d8cf283"
            ]
        ]
    },
    {
        "id": "393c2d51477e9846",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "html.wifimon",
        "field": "payload.html.wifimon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n                <div class='card'>\n                    <p class='card-title'>WiFi Connection</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Device Update</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <img src='/img/heartRed.png' id='heartBeatID' width='100px' height='100px'/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Signal Level (dBm)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='signalLevelId' >-100</span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Link Quality (/70)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='linkQualityId' >-1</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 970,
        "y": 900,
        "wires": [
            [
                "ab3e836979097377"
            ]
        ]
    },
    {
        "id": "71d9754837477cde",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "html.dashboard",
        "field": "payload.html.dashboard",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div width='100%' style='padding-bottom: 25px;'>\n        <div class='card'>\n            <p class='card-title'>Mode Spectrum</p>\n            <div class='card-body' align=\"center\" width='100%'>\n                <div id=\"spectrogram\"></div>\n                <div class=\"row\"> \n                    <div class=\"col-md-5\" align=\"left\" >\n                        <span class=\"card-text\">Start Time</span>\n                    </div>\n                    <div class=\"col-md-7\">\n                        <span class=\"card-text\" id=\"startTime\"></span>\n                    </div>\n                </div>\n                <div class=\"row\"> \n                    <div class=\"col-md-5\"  align=\"left\">\n                        <span class=\"card-text\" >Stop Time</span>\n                    </div>\n                    <div class=\"col-md-7\">\n                        <span class=\"card-text\" id=\"stopTime\" ></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div width='100%' style='padding-bottom: 25px;'>\n        <div class='card'>\n            <p class='card-title'>Display Control</p>\n            <div class='card-body' align=\"center\" width='100%'>\n                <div class=\"row\"> \n                    <div class=\"col-md-6\" align=\"center\" style=\"padding-top:10px;padding-bottom:10px;\">\n                        <button class=\"btn jumbotron-button btn-block card-text\" id=\"freezeButton\" type=\"button\" onclick=\"freezeRun()\"></button>\n                    </div>\n                    <div class=\"col-md-6\" align=\"center\" style=\"padding-top:10px;padding-bottom:10px;\">\n                        <button class=\"btn jumbotron-button btn-block card-text\" id=\"birdsEyeButton\" type=\"button\" onclick=\"birdsEyeView()\">Birds Eye</button>\n                    </div>\n                </div>\n                <div class=\"row\"> \n                    <div class=\"col-md-6\" align=\"center\" style=\"padding-top:10px;padding-bottom:10px;\">\n                        <button class=\"btn jumbotron-button btn-block card-text\" id=\"sliceViewButton\" type=\"button\" onclick=\"sliceView()\">Slice View</button>\n                    </div>\n                    <div class=\"col-md-6\" align=\"center\" style=\"padding-top:10px;padding-bottom:10px;\">\n                        <button class=\"btn jumbotron-button btn-block card-text\" id=\"sliceViewButton\" type=\"button\" onclick=\"topView()\">Top View</button>\n                    </div>\n                </div>\n                <div class=\"row\"> \n                    <div class=\"col-md-5\" align=\"right\" >\n                        <span class=\"card-text\" >PlotSlices</span>\n                    </div>\n                    <div class=\"col-md-7\">\n                        <input class=\"form-control center-justify big-text\" id=\"plotslices\" type=\"text\" value=\"0\" />\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div width='100%' style='padding-bottom: 25px;'>\n        <div class='card'>\n            <p class='card-title'>Summary</p>\n            <div class='card-body' align=\"center\" width='100%'>\n               <table width='100%'>\n                    <tr>\n                        <td width='60%' align=\"left\">\n                            <span class=\"tableText\">Beam current (mA)</span>\n                        </td>\n                        <td width='40%' align=\"right\">\n                            <span class=\"card-text\" id=\"beamCurrent\"></span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td width='60%' align=\"left\">\n                            <span class=\"tableText\">RMS Phase (deg)</span>\n                        </td>\n                         <td width='40%' align=\"right\">\n                            <span class=\"card-text\" id=\"rmsPhase\"></span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td width='60%' align=\"left\">\n                            <span class=\"tableText\">Max Mode</span>\n                        </td>\n                        <td width='40%' align=\"right\">\n                            <span class=\"card-text\" id=\"maxMode\"></span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td width='60%' align=\"left\">\n                            <span class=\"tableText\">Mode Amp (deg)</span>\n                        </td>\n                        <td width='40%' align=\"right\">\n                            <span class=\"card-text\" id=\"modeAmplitude\"></span>\n                        </td>\n                     </tr>\n                    <tr>\n                        <td width='60%' align=\"left\">\n                            <span class=\"tableText\">Avg Phase (deg)</span>\n                        </td>\n                       <td width='40%' align=\"right\">\n                            <span class=\"card-text\" id=\"avgPhase\"></span>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n    </div>\n",
        "output": "str",
        "x": 980,
        "y": 820,
        "wires": [
            [
                "f0a3e4b8a438de43"
            ]
        ]
    },
    {
        "id": "355c0ee49092e965",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "yellowSpectrum.png",
        "output": "str",
        "x": 290,
        "y": 860,
        "wires": [
            [
                "94078219625670da"
            ]
        ]
    },
    {
        "id": "f0a3e4b8a438de43",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "html.user",
        "field": "payload.html.user",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "                <div class='card' id='userCardId'>\n                    <div class='card-body' align=\"center\">\n                        <table width=\"100%\">\n                            <tr>\n                                <td  align=\"left\">\n                                     <span class='card-text' style='color:black;'>User:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='usernameId'></span>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td  align=\"left\">\n                                    <span class='card-text' style='color:black;'>Time left:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='expTimeId'></span>\n                                </td>\n                            </tr>\n                        </table>\n                        <table width=\"100%\">\n                            <tr>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"renew()\" >Renew</button>\n                                </td>\n                                <td width=\"10%\"></td>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"logout()\" >Logout</button>\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 960,
        "y": 860,
        "wires": [
            [
                "393c2d51477e9846"
            ]
        ]
    },
    {
        "id": "cdb0a843fa73695d",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "script.user",
        "field": "payload.script.user",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        function getCreds()\n        {\n            var now = new Date().getTime();\n            var expDate = Number(getCookie('ExpDate'));\n            if (expDate > 0)\n            {\n                expDate = expDate - now;\n                if(expDate < 0)\n                {\n                    logout();\n                }\n                else\n                {\n                    var hours = Math.floor(expDate / 3600000);\n                    var minutes = expDate - hours * 3600000;\n                    minutes = Math.floor(minutes / 60000);\n                    var seconds = expDate - (hours * 3600000) - (minutes * 60000);\n                    seconds = Math.floor(seconds / 1000);\n                    hours = hours.toString();\n                    if (hours.length == 1) hours = '0' + hours; \n                    minutes = minutes.toString();\n                    if (minutes.length == 1) minutes = '0' + minutes; \n                    seconds = seconds.toString();\n                    if (seconds.length == 1) seconds = '0' + seconds; \n                    var timeString = hours + ':' + minutes + ':' + seconds;\n                    $('#usernameId').text(getCookie('Username'));\n                    $('#expTimeId').text(timeString);\n                }\n            }\n            else\n            {\n                $('#usernameId').text(getCookie('Username'));\n                $('#expTimeId').text('Forever');\n            }\n        }\n        function logout()\n        {\n            document.cookie = project + \"Role= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"ExpDate= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"Username= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            window.location.href = \"/\";\n        }\n        function renew()\n        {\n            var actionMsg = {};\n            sendActionMsg('renew', 'renew', actionMsg);\n        }\n        function updateCookie(msg)\n        {\n            document.cookie = project + \"Role=\" + msg.role;\n            document.cookie = project + \"ExpDate=\" + msg.expDate;\n            document.cookie = project + \"Username=\" + msg.username;\n        }\n        function downloadToken()\n        {\n            downloadString(getCookie(\"Role\"), \"text/plain\", project + \"-token.txt\");\n        }\n// from https://gist.github.com/danallison/3ec9d5314788b337b682\n        function downloadString(text, fileType, fileName) \n        {\n            var blob = new Blob([text], { type: fileType });\n            \n            var a = document.createElement('a');\n            a.download = fileName;\n            a.href = URL.createObjectURL(blob);\n            a.dataset.downloadurl = [fileType, a.download, a.href].join(':');\n            a.style.display = \"none\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);\n        }",
        "output": "str",
        "x": 650,
        "y": 860,
        "wires": [
            [
                "338ce6d79ff0ef34"
            ]
        ]
    },
    {
        "id": "548f4476d5182f4b",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "extraScripts",
        "field": "payload.extraScripts",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <script src=\"/scripts/visDist/vis.js\"></script>\n    ",
        "output": "str",
        "x": 650,
        "y": 940,
        "wires": [
            [
                "71d9754837477cde"
            ]
        ]
    },
    {
        "id": "bdda2187c7654339",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "script.global",
        "field": "payload.script.global",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Global Javascript\n        useWebSockets(true);\n        var mqttDevice = null;\n        var device = null;\n        var pingInterval = 5000;\n        var lastPing = 0;\n\n        var restfulDevice = \n        {\n            deviceType  : '{{{payload.script.deviceType}}}',\n            name        : '{{{payload.script.name}}}',\n            project     : '{{{payload.script.project}}}'\n        };\n\n        var graph3d = null;\n        var itimeSlice = 0;\n        var timeMax = 320;\n        var dataArray = [];\n        var timeStamp = [];\n        var deltaT = 0;\n        var freeze = false;\n        var sliceViewActive = false;\n        var birdsEyeViewActive = false;\n        var topViewActive = false;\n        var birdsEyeTimeMax = 320;\n        var plotStarted = false;\n        \n        var threedPlotOptions =\n        {\n            width: '850px',\n            height: '600px',\n            style: 'surface',\n            showPerspective: false,\n            showGrid: true,\n            showShadow: false,\n            keepAspectRatio: false,\n            verticalRatio: 0.6,\n            showZAxis: true,\n            xLabel: 'x',\n            yLabel: 'Time',\n            tooltip: true,\n            axisColor: '#000000',\n        };\n\n        function onDocumentReady()\n        {\n            setRemoteApp(false);\n            if (remoteApp)\n            {\n                getCreds();\n                setInterval(function(){getCreds();}, 1000);\n            }\n            else\n            {\n                $('#userCardId').hide();\n            }\n            $(\"#freezeButton\").text('Running');\n            $(\"#plotslices\").val(timeMax.toString());\n            $(\"#plotslices\").change(function()\n            {\n              timeMax = Number($(\"#plotslices\").val());\n              if (timeMax < 2)\n              {\n                  alert('Number of plot slices must be greater than 1');\n                  timeMax = 2;\n              }\n              birdsEyeTimeMax = timeMax;\n              $(\"#plotslices\").val(timeMax.toString());\n              dataArray = [];\n              itimeSlice = 0;\n              plotStarted = false;\n            });\n            sliceViewActive = false;\n            birdsEyeViewActive = true;\n            topViewActive = false;\n        }\n        function onWebSocketOpen()\n        {\n            acknowledgeDialog('Alert', 'Wait!', 'Contacting the Mother Ship...');\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n            switch(msg.topic)\n            {\n                case 'readings':\n                    if ((msg.mqttDevice.name == restfulDevice.name) && (msg.mqttDevice.deviceType == restfulDevice.deviceType)  && (msg.mqttDevice.project == restfulDevice.project) )\n                    {\n                        lastPing = new Date().getTime();\n                        heartbeat();\n                        device = JSON.parse(pako.inflate(msg.payload, { to: 'string' }));\n                        mqttDevice = msg.mqttDevice;\n                        updateDmaReadings();\n                    }\n                    break;\n                case 'readDatabase':\n                    if (msg.userID == userID)\n                    {\n                    }\n                    break;\n                case 'renew':\n                    if (msg.userID == userID)\n                    {\n                        updateCookie(msg);\n                    }\n                    break;\n                case 'permissionError':\n                    if (msg.userID == userID)\n                    {\n                        acknowledgeDialog('Permission', 'Error', msg.payload);\n                    }\n                    break;\n                case 'loginExpired':\n                    if (msg.userID == userID)\n                    {\n                       location.reload();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        function updateDmaReadings()\n        {\n            globalData();\n            arrayData();\n            $( \"#acknowledgeDialog\" ).dialog('close');\n            \n        }\n        function globalData()\n        {\n            $('#linkQualityId').text(device.linkQuality.value);\n            $('#signalLevelId').text(device.signalLevel.value);\n            $(\"#beamCurrent\").text(Math.round(device.beamCurrent.value * 100.0) / 100.0);\n            $(\"#rmsPhase\").text(Math.round(device.rmsModeAmp.value * 100.0) / 100.0);\n            $(\"#maxMode\").text(device.maxDipoleMode.value);\n            $(\"#modeAmplitude\").text(Math.round(device.maxDipoleModeAmp.value * 100.0) / 100.0);\n            $(\"#avgPhase\").text(Math.round(device.avgPhase.value * 100.0) / 100.0);\n\n        }\n        function arrayData()\n        {\n            var modeM = device.modeM.value;\n            var npts = modeM[0].length;\n            if(!plotStarted)\n            {\n                dataArray = [];\n                for (var ix = 0; ix < npts; ++ix)\n                {\n                      dataArray[ix] =\n                      {\n                        'x': ix,\n                        'y': 0,\n                        'z': modeM[1][ix],\n                        'style': modeM[1][ix]\n                      };\n                    }\n            var container = document.getElementById('spectrogram');\n        \n            graph3d = new vis.Graph3d(container, dataArray, threedPlotOptions);\n            $(\"#startTime\").text(new Date().toLocaleString());\n            $(\"#stopTime\").text(new Date().toLocaleString());\n            graph3d.on('cameraPositionChange', onCameraPositionChange);\n            if (sliceViewActive) sliceView();\n            if (birdsEyeViewActive) birdsEyeView();\n            if (topViewActive) topView();\n            plotStarted = true;\n          }\n          else\n          {\n            if (freeze) return;\n            if (itimeSlice < timeMax)\n            {\n              timeStamp[itimeSlice] = new Date().getTime();\n              deltaT = (timeStamp[itimeSlice] - timeStamp[0]) / 1000;\n              for (var ix = 0; ix < npts; ++ix)\n              {\n                dataArray[itimeSlice * npts + ix] =\n                {\n                  'x': ix,\n                  'y': deltaT,\n                  'z': modeM[1][ix],\n                  'style': modeM[1][ix]\n                };\n              }\n              ++itimeSlice;\n            }\n            else\n            {\n              for (var itime = 0; itime < (timeMax - 1); ++itime)\n              {\n                timeStamp[itime] = timeStamp[itime + 1];\n                deltaT = (timeStamp[itime] - timeStamp[0]) / 1000;\n                for (var ix = 0; ix < npts; ++ix)\n                {\n                  dataArray[itime * npts + ix] =\n                  {\n                    'x': dataArray[(itime + 1) * npts + ix].x,\n                    'y': deltaT,\n                    'z': dataArray[(itime + 1) * npts + ix].z,\n                    'style': dataArray[(itime + 1) * npts + ix].style\n                  };\n                }\n              }\n              timeStamp[timeMax - 1] = new Date().getTime();\n              deltaT = (timeStamp[timeMax - 1] - timeStamp[0]) / 1000;\n              for (var ix = 0; ix < npts; ++ix)\n              {\n                dataArray[(timeMax - 1) * npts + ix] =\n                {\n                  'x': ix,\n                  'y': deltaT,\n                  'z': modeM[1][ix],\n                  'style': modeM[1][ix]\n                };\n              }\n            }\n            $(\"#startTime\").text(new Date(timeStamp[0]).toLocaleString());\n            $(\"#stopTime\").text(new Date(timeStamp[itimeSlice - 1]).toLocaleString());\n            graph3d.setData(dataArray);\n          }\n        }\n        function freezeRun()\n        {\n          freeze = !freeze;\n          if (freeze)\n          {\n            $(\"#freezeButton\").text('Frozen');\n          }\n          else\n          {\n            $(\"#freezeButton\").text('Running');\n          }\n        \n        }\n        \n        function birdsEyeView()\n        {\n          var horzAngle = 315.0 * 3.1415927 / 180.0;\n          var vertAngle = 45.0 * 3.1415927 / 180.0;\n          graph3d.setCameraPosition({'horizontal': horzAngle, 'vertical': vertAngle, 'distance': 2.0});\n          if (sliceViewActive)\n          {\n            timeMax =  birdsEyeTimeMax;\n            $(\"#plotslices\").val(timeMax.toString());\n          }\n            sliceViewActive = false;\n            birdsEyeViewActive = true;\n            topViewActive = false;\n        \n        }\n        function sliceView()\n        {\n          var horzAngle = 0.0 * 3.1415927 / 180.0;\n          var vertAngle = 0.0 * 3.1415927 / 180.0;\n          graph3d.setCameraPosition({'horizontal': horzAngle, 'vertical': vertAngle, 'distance': 1.1});\n          timeMax = 2;\n          $(\"#plotslices\").val(timeMax.toString());\n          itimeSlice = 0;\n          plotStarted = false;\n          sliceViewActive = true;\n          birdsEyeViewActive = false;\n          topViewActive = false;\n        \n        }\n        function topView()\n        {\n          var horzAngle = 0 * 3.1415927 / 180.0;\n          var vertAngle = 90 * 3.1415927 / 180.0;\n          graph3d.setCameraPosition({'horizontal': horzAngle, 'vertical': vertAngle, 'distance': 2.0});\n          if (sliceViewActive)\n          {\n            timeMax =  birdsEyeTimeMax;\n            $(\"#plotslices\").val(timeMax.toString());\n          }\n            sliceViewActive = false;\n            birdsEyeViewActive = false;\n            topViewActive = true;\n        \n        }\n        function onCameraPositionChange(event)\n        {\n          if (sliceViewActive) sliceView();\n          if (birdsEyeViewActive) birdsEyeView();\n          if (topViewActive) topView();\n        }\n",
        "output": "str",
        "x": 650,
        "y": 820,
        "wires": [
            [
                "cdb0a843fa73695d"
            ]
        ]
    },
    {
        "id": "91bb94404d8cf283",
        "type": "subflow:8341090a.df9758",
        "z": "8475ab9.3d26058",
        "name": "",
        "x": 1310,
        "y": 940,
        "wires": []
    },
    {
        "id": "2a86fb4b0a5515d2",
        "type": "function",
        "z": "8475ab9.3d26058",
        "name": "Set Name And Device Type",
        "func": "msg.payload['script'] = {};\nmsg.payload['script']['name'] = msg.payload.name\nmsg.payload['script']['deviceType'] = 'osc-over';\nmsg.payload['script']['project'] = global.get('project');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 1040,
        "wires": [
            [
                "d970415114338f44"
            ]
        ]
    },
    {
        "id": "bba65a417ffe42e2",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "Set Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "R3 Comfort Display",
        "output": "str",
        "x": 340,
        "y": 1120,
        "wires": [
            [
                "f348e6ef44edd364"
            ]
        ]
    },
    {
        "id": "d970415114338f44",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "comfortYellow.png",
        "output": "str",
        "x": 350,
        "y": 1080,
        "wires": [
            [
                "bba65a417ffe42e2"
            ]
        ]
    },
    {
        "id": "610e97a586730d7c",
        "type": "subflow:8341090a.df9758",
        "z": "8475ab9.3d26058",
        "name": "",
        "x": 1330,
        "y": 1160,
        "wires": []
    },
    {
        "id": "9b8b07d3d396a005",
        "type": "http in",
        "z": "8475ab9.3d26058",
        "name": "/comfort",
        "url": "/comfort",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1040,
        "wires": [
            [
                "2a86fb4b0a5515d2"
            ]
        ]
    },
    {
        "id": "f348e6ef44edd364",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "script.global",
        "field": "payload.script.global",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Global Javascript\n        useWebSockets(true);\n        var mqttDevice = null;\n        var device = null;\n        var pingInterval = 5000;\n        var lastPing = 0;\n        var plotHeight = 450;\n        var titleFontSize = 24;\n        var topMarginSize = 50;\n\n        var oldModesToPlot = [-1,-1,-1,-1];\n        var modesToPlot = [0,1,9,59];\n        var modesToPlotColor = ['blue', 'green', 'orange', 'magenta'];\n        var modesToPlotMarker = ['square', 'circle','triangle', 'x'];\n        var modeDisplayAttrName = ['modeDisplayA', 'modeDisplayB', 'modeDisplayC', 'modeDisplayD'];\n        var modeDisplayEditName = '';\n//        var plotStart = new Date();\n        var modeEvTraceData = [{},{},{},{}];\n        var modeEvLayout = {};\n\n        var restfulDevice = \n        {\n            deviceType  : '{{{payload.script.deviceType}}}',\n            name        : '{{{payload.script.name}}}',\n            project     : '{{{payload.script.project}}}'\n        };\n\n        function onDocumentReady()\n        {\n            setRemoteApp(false);\n            if (remoteApp)\n            {\n                getCreds();\n                setInterval(function(){getCreds();}, 1000);\n            }\n            else\n            {\n                $('#userCardId').hide();\n            }\n        }\n        function onWebSocketOpen()\n        {\n            acknowledgeDialog('Alert', 'Wait!', 'Contacting the Mother Ship...');\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n            switch(msg.topic)\n            {\n                case 'readings':\n                    if ((msg.mqttDevice.name == restfulDevice.name) && (msg.mqttDevice.deviceType == restfulDevice.deviceType)  && (msg.mqttDevice.project == restfulDevice.project) )\n                    {\n                        lastPing = new Date().getTime();\n                        heartbeat();\n                        device = JSON.parse(pako.inflate(msg.payload, { to: 'string' }));\n                        mqttDevice = msg.mqttDevice;\n                        updateDmaReadings();\n                    }\n                    break;\n                case 'readDatabase':\n                    if (msg.userID == userID)\n                    {\n                    }\n                    break;\n                case 'renew':\n                    if (msg.userID == userID)\n                    {\n                        updateCookie(msg);\n                    }\n                    break;\n                case 'permissionError':\n                    if (msg.userID == userID)\n                    {\n                        acknowledgeDialog('Permission', 'Error', msg.payload);\n                    }\n                    break;\n                case 'loginExpired':\n                    if (msg.userID == userID)\n                    {\n                       location.reload();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        function updateDmaReadings()\n        {\n            $('#linkQualityId').text(device.linkQuality.value);\n            $('#signalLevelId').text(device.signalLevel.value);\n            phasePlot();\n            modePlot();\n            bunchPlot();\n            dataGlobal();\n            var startModeEvPlot = false;\n            for (var ii = 0; ii < modesToPlot.length; ++ii)\n            {\n                if (modesToPlot[ii] != oldModesToPlot[ii]) \n                {\n                    startModeEvPlot = true;\n                    $('#' + modeDisplayAttrName[ii]).html(modesToPlot[ii].toString());\n                }\n                oldModesToPlot[ii] = modesToPlot[ii];\n            }\n            if (startModeEvPlot)\n            {\n                initModeEvPlot();\n            }\n            updateModeEvPlot();\n            $( \"#acknowledgeDialog\" ).dialog('close');\n        }\n        function dataGlobal()\n        {\n            $(\"#beamCurrent\").text(Math.round(device.beamCurrent.value * 100.0) / 100.0);\n            $(\"#rmsPhase\").text(Math.round(device.rmsModeAmp.value * 100.0) / 100.0);\n            $(\"#maxMode\").text(device.maxDipoleMode.value);\n            $(\"#modeAmplitude\").text(Math.round(device.maxDipoleModeAmp.value * 100.0) / 100.0);\n            $(\"#avgPhase\").text(Math.round(device.avgPhase.value * 100.0) / 100.0);\n        }\n        function phasePlot()\n        {\n            var normalCardStyle = '#575491';\n            var normalCardTitleStyle = '#fdc300';\n            var normalCardBodyStyle = '#9f9dc7';\n            var normalTraceColor = '#575491';\n            var alarmCardStyle = 'red';\n            var alarmCardTitleStyle = 'white';\n            var alarmCardBodyStyle = 'pink';\n            var alarmTraceColor = 'red';\n            \n            var cardStyle = normalCardStyle;\n            var cardTitleStyle = normalCardTitleStyle;\n            var cardBodyStyle = normalCardBodyStyle;\n            var traceColor = normalTraceColor;\n            if (device.beamCurrent.value > 50.0)\n            {\n                if (device.maxDipoleModeAmp.value > device.maxDipoleModeAmp.alarm.limits.high)\n                {\n                    cardStyle = alarmCardStyle;\n                    cardTitleStyle = alarmCardTitleStyle;\n                    cardBodyStyle = alarmCardBodyStyle;\n                    traceColor = alarmTraceColor;\n                }\n            }\n            $('#phaseCard').css('background-color',cardStyle);\n            $('#phaseCardBody').css('background-color',cardBodyStyle);\n            $('#phaseCardTitle').css('color',cardTitleStyle);\n            var ymax = device.maxDipoleModeAmp.alarm.limits.hihi;\n            var layout =\n            {   \n                title: \n                {\n                    text : 'Differential Phase',\n                    font : {size : titleFontSize}\n                },\n                showlegend: false,\n                xaxis: {title: 'Bunch Number'},\n                yaxis: {title: 'phase (deg)', range: [-ymax,ymax]},\n                height: plotHeight,\n                margin: \n                    {\n                        t: topMarginSize, //top margin\n    //                    l: 0, //left margin\n    //                    r: 0, //right margin\n    //                    b: 20 //bottom margin\n                    }\n            };\n            var traceData = [{}];\n            var phase = device.difPhase.value;\n            traceData[0] = {x: [],y: [],name: 'phase', yaxis: 'y1',type: 'bar',marker: {color: traceColor}};\n            for (var ii = 0; ii < phase[0].length; ++ii)\n            {\n                traceData[0].x[ii] = phase[0][ii];\n                traceData[0].y[ii] = phase[1][ii];\n            }\n            Plotly.newPlot('phasePlot', traceData, layout, {displayModeBar: false, staticPlot: true});\n        }\n        function modePlot()\n        {\n            var normalCardStyle = '#575491';\n            var normalCardTitleStyle = '#fdc300';\n            var normalCardBodyStyle = '#9f9dc7';\n            var normalTraceColor = '#575491';\n            var alarmCardStyle = 'red';\n            var alarmCardTitleStyle = 'white';\n            var alarmCardBodyStyle = 'pink';\n            var alarmTraceColor = 'red';\n            \n            var cardStyle = normalCardStyle;\n            var cardTitleStyle = normalCardTitleStyle;\n            var cardBodyStyle = normalCardBodyStyle;\n            var traceColor = normalTraceColor;\n            if (device.beamCurrent.value > 50.0)\n            {\n                if (device.maxDipoleModeAmp.value > device.maxDipoleModeAmp.alarm.limits.high)\n                {\n                    cardStyle = alarmCardStyle;\n                    cardTitleStyle = alarmCardTitleStyle;\n                    cardBodyStyle = alarmCardBodyStyle;\n                    traceColor = alarmTraceColor;\n                }\n            }\n            $('#modeSpectrumCard').css('background-color',cardStyle);\n            $('#modeSpectrumCardBody').css('background-color',cardBodyStyle);\n            $('#modeSpectrumCardTitle').css('color',cardTitleStyle);\n            var ymax = device.maxDipoleModeAmp.alarm.limits.high;\n            var yscale = Math.floor(Math.log10(ymax)) + 1;\n            var layout =\n            {   \n                title: \n                {\n                    text : 'Mode Spectrum',\n                    font : {size : titleFontSize}\n                },\n                xaxis: {title: 'Mode Number'},\n                yaxis: {title: 'Amplitude (deg)', type: 'log', range: [-1,yscale]},\n                shapes: [{\n                            type: 'rect',\n                            xref: 'paper',\n                            x0: 0,\n                            x1: 1,\n                            yref: 'y',\n                            y0: ymax,\n                            y1: ymax + .1,\n                            line: { width: 0},\n                            fillcolor: 'red'\n                        }],\n                height: plotHeight,\n                margin: \n                    {\n                        t: topMarginSize, //top margin\n    //                    l: 0, //left margin\n    //                    r: 0, //right margin\n    //                    b: 20 //bottom margin\n                    }\n            };\n            var modeM = device.modeM.value;\n            var traceData = [{}];\n            traceData[0] = {x: [],y: [],name: 'mode', yaxis: 'y1',type: 'bar',marker: {color: traceColor}};\n            for (var ii = 0; ii < modeM[0].length; ++ii)\n            {\n                traceData[0].x[ii] = modeM[0][ii];\n                traceData[0].y[ii] = modeM[1][ii];\n            }\n            Plotly.newPlot('modePlot', traceData, layout, {displayModeBar: false, staticPlot: true});\n        }\n        function bunchPlot()\n        {\n            var layout =\n            {   \n                title: \n                {\n                    text : 'Bunch Intensity',\n                    font : {size : titleFontSize}\n                },\n                showlegend: false,\n                xaxis: {title: 'Bunch Number'},\n                yaxis: \n                {\n                    title: 'Bunch Current (mA)',\n                    rangemode       : 'tozero'\n                },\n                height: plotHeight,\n                margin: \n                {\n                    t: topMarginSize, //top margin\n//                    l: 0, //left margin\n//                    r: 0, //right margin\n//                    b: 20 //bottom margin\n                },\n                \n            };\n            var bunchCurrent = device.bunchCurrent.value;\n            var traceData = [{}];\n            traceData[0] = {x: [],y: [],name: 'bunch Intensity', yaxis: 'y1',type: 'bar',marker: {color: '#575491'}};\n            for (var ii = 0; ii < bunchCurrent[0].length; ++ii)\n            {\n                traceData[0].x[ii] = bunchCurrent[0][ii];\n                traceData[0].y[ii] = bunchCurrent[1][ii];\n            }\n            Plotly.newPlot('bunchPlot', traceData, layout,  {displayModeBar: false, staticPlot: true});\n        }\n        function absPhasePlot()\n        {\n            var layout =\n            {   \n                title: \n                {\n                    text : 'Absolute Phase',\n                    font : {size : titleFontSize}\n                },\n                showlegend: false,\n                xaxis: {title: 'Bunch Number'},\n                yaxis: {title: 'Phase (deg)'},\n                height: plotHeight,\n                margin: \n                    {\n                        t: topMarginSize, //top margin\n    //                    l: 0, //left margin\n    //                    r: 0, //right margin\n    //                    b: 20 //bottom margin\n                    }\n                \n            };\n            var phase = device.phase.value;\n            var traceData = [{}];\n            traceData[0] = {x: [],y: [],name: 'abs phase', yaxis: 'y1',type: 'bar',marker: {color: '#575491'}};\n            for (var ii = 0; ii < phase[0].length; ++ii)\n            {\n                traceData[0].x[ii] = phase[0][ii];\n                traceData[0].y[ii] = phase[1][ii];\n            }\n            Plotly.newPlot('absPhasePlot', traceData, layout, {displayModeBar: false, staticPlot: true});\n        }\n        function updateModeEvPlot()\n        {\n            var plotableMode = false;\n            for (var imode = 0; imode < modesToPlot.length; ++imode)\n            {\n                if (modesToPlot[imode] > -1) plotableMode = true;\n            }\n            if (!plotableMode) return;\n            $('#refreshModePlot').show();\n\n            var modeM = device.modeM.value;\n//            var xtime = (new Date().getTime() - plotStart.getTime()) / 1000;\n            var xtime = new Date().getTime();\n            for (var imode = 0; imode < modesToPlot.length; ++imode)\n            {\n                if (modesToPlot[imode] > -1)\n                {\n                    modeEvTraceData[imode].x.push(xtime);\n                    modeEvTraceData[imode].y.push(modeM[1][modesToPlot[imode]]);\n                }\n            }\n            if (modeEvTraceData[0].x.length > 1000)\n            {\n                for (var imode = 0; imode < modesToPlot.length; ++imode)\n                {\n                    if (modesToPlot[imode] > -1)\n                    {\n                        modeEvTraceData[imode].x.splice(0,1);\n                        modeEvTraceData[imode].y.splice(0,1);\n                    }\n                }\n            }\n            Plotly.newPlot('modeEvPlot', modeEvTraceData, modeEvLayout, {displayModeBar: false, staticPlot: true});\n        }\n        function initModeEvPlot()\n        {\n            $('#refreshModePlot').hide();\n            \n            for (var imode = 0; imode < modesToPlot.length; ++imode)\n            {\n                if (modesToPlot[imode] > -1)\n                {\n                    modeEvTraceData[imode] = \n                    {\n                        x: [],\n                        y: [],\n                        name: 'Mode ' + modesToPlot[imode].toString(), \n                        yaxis: 'y1',\n                        type: 'scatter',\n//                        mode: 'lines',\n//                        line: {color: modesToPlotColor[imode]}\n                        mode: 'markers',\n                        marker : \n                        {\n                            color: modesToPlotColor[imode],\n                            symbol: modesToPlotMarker[imode],\n                            size: 10\n                        }\n                    };\n                }\n                else\n                {\n                    modeEvTraceData[imode] = {};\n                }\n            }\n            var ymax = device.maxDipoleModeAmp.alarm.limits.high;\n            var yscale = Math.floor(Math.log10(ymax)) + 1;\n            modeEvLayout =\n            {   \n                title: \n                {\n                    text : 'Mode Evolution',\n                    font : {size : titleFontSize}\n                },\n                showlegend: true,\n                legend:\n                {\n                    x: 0,\n                    y: 1, \n                    xanchor: 'left',\n                    \"orientation\": \"h\"\n                },\n                xaxis: \n                {   \n    //                title: 'Time (sec)'\n                    type: 'date'\n                    \n                },\n                yaxis: \n                {\n                    title: 'Mode Amplitude (deg)',\n                    type: 'log', \n                    range: [-1,yscale]\n                },\n                shapes : \n                [\n                    {\n                        type: 'rect',\n                        xref: 'paper',\n                        x0: 0,\n                        x1: 1,\n                        yref: 'y',\n                        y0: ymax,\n                        y1: ymax + .1,\n                        line: { width: 0},\n                        fillcolor: 'red'\n                    }\n                ],\n                height: plotHeight,\n                margin: \n                    {\n                        t: topMarginSize, //top margin\n    //                    l: 0, //left margin\n    //                    r: 0, //right margin\n    //                    b: 20 //bottom margin\n                    },\n            };\n         }\n        function changeModeDisplay(itrace)\n        {\n            $( \"#editDeviceDialog\" ).dialog( \"option\", \"title\", \"Edit\"); \n            $( \"#editModeEvTraceDialogAttribute\").html('Trace ' + (itrace + 1).toString());\n            modeDisplayEditName = modeDisplayAttrName[itrace];\n\n            $( \"#modeEvTraceNumber\").val(modesToPlot[itrace]);\n\n            $( \"#editModeEvTraceDialog\" ).dialog( \"open\" );\n        }\n// Edit Temp JavaScript\n       $( function() \n        {\n            $( \"#editModeEvTraceDialog\" ).dialog(\n                {\n//                    closeOnEscape: false,\n//                    open: function(event, ui) {$(\".ui-dialog-titlebar-close\", ui.dialog | ui).hide();},\n                    width:    640,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Set\",\n                            click: function() {setModeEvTraceNumber(); $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        }\n                    ]\n                });\n        } );\n        function setModeEvTraceNumber()\n        {\n            if (isNaN( $('#modeEvTraceNumber').val()) )\n            {\n                acknowledgeDialog('Error', 'Entry not a number!', modeDisplayEditName);\n                return;\n            }\n            var plotIndex = -1;\n            if (modeDisplayEditName == modeDisplayAttrName[0]) plotIndex = 0;\n            if (modeDisplayEditName == modeDisplayAttrName[1]) plotIndex = 1;\n            if (modeDisplayEditName == modeDisplayAttrName[2]) plotIndex = 2;\n            if (modeDisplayEditName == modeDisplayAttrName[3]) plotIndex = 3;\n            modesToPlot[plotIndex]  = Number($('#modeEvTraceNumber').val());\n        }\n        \n",
        "output": "str",
        "x": 710,
        "y": 1040,
        "wires": [
            [
                "a769dcd8a4425703"
            ]
        ]
    },
    {
        "id": "f29e86c694643712",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "javascript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "{{{payload.script.global}}}\n{{{payload.script.user}}}\n",
        "output": "str",
        "x": 700,
        "y": 1120,
        "wires": [
            [
                "6ea1d4a3fd8ddabe"
            ]
        ]
    },
    {
        "id": "5697053b2132684b",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "{{{payload.html.dashboard}}}\n    <div width=\"100%\">\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.user}}}\n            </div>\n        </div>\n    </div>",
        "output": "str",
        "x": 1010,
        "y": 1160,
        "wires": [
            [
                "610e97a586730d7c"
            ]
        ]
    },
    {
        "id": "311cbc09339a370f",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "html.wifimon",
        "field": "payload.html.wifimon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n                <div class='card'>\n                    <p class='card-title'>WiFi Connection</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Device Update</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <img src='/img/heartRed.png' id='heartBeatID' width='100px' height='100px'/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Signal Level (dBm)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='signalLevelId' >-100</span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Link Quality (/70)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='linkQualityId' >-1</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 1030,
        "y": 1120,
        "wires": [
            [
                "5697053b2132684b"
            ]
        ]
    },
    {
        "id": "6ea1d4a3fd8ddabe",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "html.dashboard",
        "field": "payload.html.dashboard",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div width='100%' style='padding-bottom: 25px;'>\n        <table  width='100%'>\n            <tr>\n                <td  width='50%'>\n                    <div class='card'  id='modeSpectrumCard'>\n                        <div class='card-body' id='modeSpectrumCardBody'>\n                            <div id=\"modePlot\"></div>\n                        </div>\n                    </div>\n                </td>\n                <td  width='50%'>\n                    <div class='card'>\n                        <div class='card-body'>\n                            <div id=\"bunchPlot\"></div>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div class='card'>\n                        <div class='card-body'>\n                            <div id=\"modeEvPlot\"></div>\n                        </div>\n                    </div>\n                </td>\n                <td>\n                    <div class='card' id='phaseCard'>\n                        <div class='card-body' id='phaseCardBody'>\n                            <div id=\"phasePlot\"></div>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div class='card'>\n                        <div class='card-body'>\n                            <table width='100%' id='modeEvTable'>\n                                <tr>\n                                    <td align=\"center\" width='20%'>\n                                        <span class=\"tableHeading\" style=\"font-size: 30px;\">Tr 1</span>\n                                    </td>\n                                    <td align=\"center\" width='20%'>\n                                        <span class=\"tableHeading\" style=\"font-size: 30px;\">Tr 2</span>\n                                    </td>\n                                    <td align=\"center\" width='20%'>\n                                        <span class=\"tableHeading\" style=\"font-size: 30px;\">Tr 3</span>\n                                    </td>\n                                    <td align=\"center\" width='20%'>\n                                        <span class=\"tableHeading\" style=\"font-size: 30px;\">Tr 4</span>\n                                    </td>\n                                    <td align=\"center\" width='20%'>\n                                    </td>\n                                </tr>\n            \n                                  <tr>\n                                    <td align=\"center\">\n                                        <button class='btn btn-block card-button big-text' id=\"modeDisplayA\" onclick=\"changeModeDisplay(0)\" >-1</button>\n                                    </td>\n                                    <td align=\"center\">\n                                        <button class='btn btn-block card-button big-text' id=\"modeDisplayB\" onclick=\"changeModeDisplay(1)\" >-1</button>\n                                    </td>\n                                    <td align=\"center\">\n                                        <button class='btn btn-block card-button big-text' id=\"modeDisplayC\" onclick=\"changeModeDisplay(2)\" >-1</button>\n                                    </td>\n                                    <td align=\"center\">\n                                        <button class='btn btn-block card-button big-text' id=\"modeDisplayD\" onclick=\"changeModeDisplay(3)\" >-1</button>\n                                    </td>\n                                    <td align=\"center\">\n                                        <button width=100% class=\"btn jumbotron-button big-text\" id=\"refreshModePlot\" type=\"button\" onclick=\"initModeEvPlot()\">Refresh</button>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </td>\n                <td>\n                    <div class='card'>\n                        <div class='card-body' style=\"padding-bottom:10px;\">\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' align=\"left\">\n                                        <span class=\"tableHeading big-text\">Max Mode</span>\n                                    </td>\n                                    <td width='40%' align=\"right\">\n                                        <span class=\"card-title\" style=\"color:white;\" id=\"maxMode\"></span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' align=\"left\">\n                                        <span class=\"tableHeading big-text\">Mode Amp (deg)</span>\n                                    </td>\n                                    <td width='40%' align=\"right\">\n                                        <span class=\"card-title\" style=\"color:white;\" id=\"modeAmplitude\"></span>\n                                    </td>\n                                 </tr>\n                            </table>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div id=\"editModeEvTraceDialog\" title=\"Change Trace\" class='card'>\n        <p class=\"tableHeading\" style=\"font-size: 30px;\" id='editModeEvTraceDialogAttribute'>Attribute</p>\n        <div class='card-body'>\n            <table>\n                <tr>\n                    <td width=\"50%\" align=\"left\"><span class=\"tableHeading tableText\">Mode</span></td>\n                    <td width=\"50%\" align=\"right\"><input class=\"form-control tableText\" id=\"modeEvTraceNumber\" type=\"text\" value=\"0\" /></td>\n                </tr>\n            </table>\n        </div>\n    </div>    \n",
        "output": "str",
        "x": 1040,
        "y": 1040,
        "wires": [
            [
                "a709cf982bcc2c6c"
            ]
        ]
    },
    {
        "id": "a709cf982bcc2c6c",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "html.user",
        "field": "payload.html.user",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "                <div class='card' id='userCardId'>\n                    <div class='card-body' align=\"center\">\n                        <table width=\"100%\">\n                            <tr>\n                                <td  align=\"left\">\n                                     <span class='card-text' style='color:black;'>User:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='usernameId'></span>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td  align=\"left\">\n                                    <span class='card-text' style='color:black;'>Time left:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='expTimeId'></span>\n                                </td>\n                            </tr>\n                        </table>\n                        <table width=\"100%\">\n                            <tr>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"renew()\" >Renew</button>\n                                </td>\n                                <td width=\"10%\"></td>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"logout()\" >Logout</button>\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 1020,
        "y": 1080,
        "wires": [
            [
                "311cbc09339a370f"
            ]
        ]
    },
    {
        "id": "a769dcd8a4425703",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "script.user",
        "field": "payload.script.user",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        function getCreds()\n        {\n            var now = new Date().getTime();\n            var expDate = Number(getCookie('ExpDate'));\n            if (expDate > 0)\n            {\n                expDate = expDate - now;\n                if(expDate < 0)\n                {\n                    logout();\n                }\n                else\n                {\n                    var hours = Math.floor(expDate / 3600000);\n                    var minutes = expDate - hours * 3600000;\n                    minutes = Math.floor(minutes / 60000);\n                    var seconds = expDate - (hours * 3600000) - (minutes * 60000);\n                    seconds = Math.floor(seconds / 1000);\n                    hours = hours.toString();\n                    if (hours.length == 1) hours = '0' + hours; \n                    minutes = minutes.toString();\n                    if (minutes.length == 1) minutes = '0' + minutes; \n                    seconds = seconds.toString();\n                    if (seconds.length == 1) seconds = '0' + seconds; \n                    var timeString = hours + ':' + minutes + ':' + seconds;\n                    $('#usernameId').text(getCookie('Username'));\n                    $('#expTimeId').text(timeString);\n                }\n            }\n            else\n            {\n                $('#usernameId').text(getCookie('Username'));\n                $('#expTimeId').text('Forever');\n            }\n        }\n        function logout()\n        {\n            document.cookie = project + \"Role= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"ExpDate= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"Username= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            window.location.href = \"/\";\n        }\n        function renew()\n        {\n            var actionMsg = {};\n            sendActionMsg('renew', 'renew', actionMsg);\n        }\n        function updateCookie(msg)\n        {\n            document.cookie = project + \"Role=\" + msg.role;\n            document.cookie = project + \"ExpDate=\" + msg.expDate;\n            document.cookie = project + \"Username=\" + msg.username;\n        }\n        function downloadToken()\n        {\n            downloadString(getCookie(\"Role\"), \"text/plain\", project + \"-token.txt\");\n        }\n// from https://gist.github.com/danallison/3ec9d5314788b337b682\n        function downloadString(text, fileType, fileName) \n        {\n            var blob = new Blob([text], { type: fileType });\n            \n            var a = document.createElement('a');\n            a.download = fileName;\n            a.href = URL.createObjectURL(blob);\n            a.dataset.downloadurl = [fileType, a.download, a.href].join(':');\n            a.style.display = \"none\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);\n        }",
        "output": "str",
        "x": 710,
        "y": 1080,
        "wires": [
            [
                "f29e86c694643712"
            ]
        ]
    },
    {
        "id": "7226788ce355f250",
        "type": "websocket out",
        "z": "8475ab9.3d26058",
        "name": "/comfort-mobile",
        "server": "65600820f71419b7",
        "client": "",
        "x": 1320,
        "y": 1480,
        "wires": []
    },
    {
        "id": "ef12416b3421f309",
        "type": "link in",
        "z": "8475ab9.3d26058",
        "name": "comfort-mobile input socket",
        "links": [
            "5f767381.0ac26c"
        ],
        "x": 1195,
        "y": 1480,
        "wires": [
            [
                "7226788ce355f250"
            ]
        ]
    },
    {
        "id": "d2e66ed076dd4c98",
        "type": "function",
        "z": "8475ab9.3d26058",
        "name": "Set Name And Device Type",
        "func": "msg.payload['script'] = {};\nmsg.payload['script']['name'] = msg.payload.name\nmsg.payload['script']['deviceType'] = 'osc-over';\nmsg.payload['script']['project'] = global.get('project');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 1280,
        "wires": [
            [
                "aade4afc4e9802b1"
            ]
        ]
    },
    {
        "id": "b5ce9257d678c874",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "Set Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "R3 Comfort Display",
        "output": "str",
        "x": 340,
        "y": 1360,
        "wires": [
            [
                "ac8ceee880b6a0aa"
            ]
        ]
    },
    {
        "id": "aade4afc4e9802b1",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "comfortYellow.png",
        "output": "str",
        "x": 350,
        "y": 1320,
        "wires": [
            [
                "b5ce9257d678c874"
            ]
        ]
    },
    {
        "id": "570704c3d0b1fbbb",
        "type": "subflow:8341090a.df9758",
        "z": "8475ab9.3d26058",
        "name": "",
        "x": 1330,
        "y": 1400,
        "wires": []
    },
    {
        "id": "0e4465852a4f35fd",
        "type": "http in",
        "z": "8475ab9.3d26058",
        "name": "/comfort-mobile",
        "url": "/comfort-mobile",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1280,
        "wires": [
            [
                "d2e66ed076dd4c98"
            ]
        ]
    },
    {
        "id": "ac8ceee880b6a0aa",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "script.global",
        "field": "payload.script.global",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Global Javascript\n        useWebSockets(true);\n        var mqttDevice = null;\n        var device = null;\n        var pingInterval = 5000;\n        var lastPing = 0;\n        var plotHeight = 450;\n        var titleFontSize = 24;\n        var topMarginSize = 50;\n\n        var oldModesToPlot = [-1,-1,-1,-1];\n        var modesToPlot = [0,1,9,59];\n        var modesToPlotColor = ['blue', 'green', 'orange', 'magenta'];\n        var modesToPlotMarker = ['square', 'circle','triangle', 'x'];\n        var modeDisplayAttrName = ['modeDisplayA', 'modeDisplayB', 'modeDisplayC', 'modeDisplayD'];\n        var modeDisplayEditName = '';\n//        var plotStart = new Date();\n        var modeEvTraceData = [{},{},{},{}];\n        var modeEvLayout = {};\n\n        var restfulDevice = \n        {\n            deviceType  : '{{{payload.script.deviceType}}}',\n            name        : '{{{payload.script.name}}}',\n            project     : '{{{payload.script.project}}}'\n        };\n\n        function onDocumentReady()\n        {\n            setRemoteApp(false);\n            if (remoteApp)\n            {\n                getCreds();\n                setInterval(function(){getCreds();}, 1000);\n            }\n            else\n            {\n                $('#userCardId').hide();\n            }\n        }\n        function onWebSocketOpen()\n        {\n            acknowledgeDialog('Alert', 'Wait!', 'Contacting the Mother Ship...');\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n            switch(msg.topic)\n            {\n                case 'readings':\n                    if ((msg.mqttDevice.name == restfulDevice.name) && (msg.mqttDevice.deviceType == restfulDevice.deviceType)  && (msg.mqttDevice.project == restfulDevice.project) )\n                    {\n                        lastPing = new Date().getTime();\n                        heartbeat();\n                        device = JSON.parse(pako.inflate(msg.payload, { to: 'string' }));\n                        mqttDevice = msg.mqttDevice;\n                        updateDmaReadings();\n                    }\n                    break;\n                case 'readDatabase':\n                    if (msg.userID == userID)\n                    {\n                    }\n                    break;\n                case 'renew':\n                    if (msg.userID == userID)\n                    {\n                        updateCookie(msg);\n                    }\n                    break;\n                case 'permissionError':\n                    if (msg.userID == userID)\n                    {\n                        acknowledgeDialog('Permission', 'Error', msg.payload);\n                    }\n                    break;\n                case 'loginExpired':\n                    if (msg.userID == userID)\n                    {\n                       location.reload();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        function updateDmaReadings()\n        {\n            $('#linkQualityId').text(device.linkQuality.value);\n            $('#signalLevelId').text(device.signalLevel.value);\n            phasePlot();\n            modePlot();\n            bunchPlot();\n            dataGlobal();\n            var startModeEvPlot = false;\n            for (var ii = 0; ii < modesToPlot.length; ++ii)\n            {\n                if (modesToPlot[ii] != oldModesToPlot[ii]) \n                {\n                    startModeEvPlot = true;\n                    $('#' + modeDisplayAttrName[ii]).html(modesToPlot[ii].toString());\n                }\n                oldModesToPlot[ii] = modesToPlot[ii];\n            }\n            if (startModeEvPlot)\n            {\n                initModeEvPlot();\n            }\n            updateModeEvPlot();\n            $( \"#acknowledgeDialog\" ).dialog('close');\n        }\n        function dataGlobal()\n        {\n            $(\"#beamCurrent\").text(Math.round(device.beamCurrent.value * 100.0) / 100.0);\n            $(\"#rmsPhase\").text(Math.round(device.rmsModeAmp.value * 100.0) / 100.0);\n            $(\"#maxMode\").text(device.maxDipoleMode.value);\n            $(\"#modeAmplitude\").text(Math.round(device.maxDipoleModeAmp.value * 100.0) / 100.0);\n            $(\"#avgPhase\").text(Math.round(device.avgPhase.value * 100.0) / 100.0);\n        }\n        function phasePlot()\n        {\n            var normalCardStyle = '#575491';\n            var normalCardTitleStyle = '#fdc300';\n            var normalCardBodyStyle = '#9f9dc7';\n            var normalTraceColor = '#575491';\n            var alarmCardStyle = 'red';\n            var alarmCardTitleStyle = 'white';\n            var alarmCardBodyStyle = 'pink';\n            var alarmTraceColor = 'red';\n            \n            var cardStyle = normalCardStyle;\n            var cardTitleStyle = normalCardTitleStyle;\n            var cardBodyStyle = normalCardBodyStyle;\n            var traceColor = normalTraceColor;\n            if (device.beamCurrent.value > 50.0)\n            {\n                if (device.maxDipoleModeAmp.value > device.maxDipoleModeAmp.alarm.limits.high)\n                {\n                    cardStyle = alarmCardStyle;\n                    cardTitleStyle = alarmCardTitleStyle;\n                    cardBodyStyle = alarmCardBodyStyle;\n                    traceColor = alarmTraceColor;\n                }\n            }\n            $('#phaseCard').css('background-color',cardStyle);\n            $('#phaseCardBody').css('background-color',cardBodyStyle);\n            $('#phaseCardTitle').css('color',cardTitleStyle);\n            var ymax = device.maxDipoleModeAmp.alarm.limits.hihi;\n            var layout =\n            {   \n                title: \n                {\n                    text : 'Differential Phase',\n                    font : {size : titleFontSize}\n                },\n                showlegend: false,\n                xaxis: {title: 'Bunch Number'},\n                yaxis: {title: 'phase (deg)', range: [-ymax,ymax]},\n                height: plotHeight,\n                margin: \n                    {\n                        t: topMarginSize, //top margin\n    //                    l: 0, //left margin\n    //                    r: 0, //right margin\n    //                    b: 20 //bottom margin\n                    }\n            };\n            var traceData = [{}];\n            var phase = device.difPhase.value;\n            traceData[0] = {x: [],y: [],name: 'phase', yaxis: 'y1',type: 'bar',marker: {color: traceColor}};\n            for (var ii = 0; ii < phase[0].length; ++ii)\n            {\n                traceData[0].x[ii] = phase[0][ii];\n                traceData[0].y[ii] = phase[1][ii];\n            }\n            Plotly.newPlot('phasePlot', traceData, layout, {displayModeBar: false, staticPlot: true});\n        }\n        function modePlot()\n        {\n            var normalCardStyle = '#575491';\n            var normalCardTitleStyle = '#fdc300';\n            var normalCardBodyStyle = '#9f9dc7';\n            var normalTraceColor = '#575491';\n            var alarmCardStyle = 'red';\n            var alarmCardTitleStyle = 'white';\n            var alarmCardBodyStyle = 'pink';\n            var alarmTraceColor = 'red';\n            \n            var cardStyle = normalCardStyle;\n            var cardTitleStyle = normalCardTitleStyle;\n            var cardBodyStyle = normalCardBodyStyle;\n            var traceColor = normalTraceColor;\n            if (device.beamCurrent.value > 50.0)\n            {\n                if (device.maxDipoleModeAmp.value > device.maxDipoleModeAmp.alarm.limits.high)\n                {\n                    cardStyle = alarmCardStyle;\n                    cardTitleStyle = alarmCardTitleStyle;\n                    cardBodyStyle = alarmCardBodyStyle;\n                    traceColor = alarmTraceColor;\n                }\n            }\n            $('#modeSpectrumCard').css('background-color',cardStyle);\n            $('#modeSpectrumCardBody').css('background-color',cardBodyStyle);\n            $('#modeSpectrumCardTitle').css('color',cardTitleStyle);\n            var ymax = device.maxDipoleModeAmp.alarm.limits.high;\n            var yscale = Math.floor(Math.log10(ymax)) + 1;\n            var layout =\n            {   \n                title: \n                {\n                    text : 'Mode Spectrum',\n                    font : {size : titleFontSize}\n                },\n                xaxis: {title: 'Mode Number'},\n                yaxis: {title: 'Amplitude (deg)', type: 'log', range: [-1,yscale]},\n                shapes: [{\n                            type: 'rect',\n                            xref: 'paper',\n                            x0: 0,\n                            x1: 1,\n                            yref: 'y',\n                            y0: ymax,\n                            y1: ymax + .1,\n                            line: { width: 0},\n                            fillcolor: 'red'\n                        }],\n                height: plotHeight,\n                margin: \n                    {\n                        t: topMarginSize, //top margin\n    //                    l: 0, //left margin\n    //                    r: 0, //right margin\n    //                    b: 20 //bottom margin\n                    }\n            };\n            var modeM = device.modeM.value;\n            var traceData = [{}];\n            traceData[0] = {x: [],y: [],name: 'mode', yaxis: 'y1',type: 'bar',marker: {color: traceColor}};\n            for (var ii = 0; ii < modeM[0].length; ++ii)\n            {\n                traceData[0].x[ii] = modeM[0][ii];\n                traceData[0].y[ii] = modeM[1][ii];\n            }\n            Plotly.newPlot('modePlot', traceData, layout, {displayModeBar: false, staticPlot: true});\n        }\n        function bunchPlot()\n        {\n            var layout =\n            {   \n                title: \n                {\n                    text : 'Bunch Intensity',\n                    font : {size : titleFontSize}\n                },\n                showlegend: false,\n                xaxis: {title: 'Bunch Number'},\n                yaxis: \n                {\n                    title: 'Bunch Current (mA)',\n                    rangemode       : 'tozero'\n                },\n                height: plotHeight,\n                margin: \n                {\n                    t: topMarginSize, //top margin\n//                    l: 0, //left margin\n//                    r: 0, //right margin\n//                    b: 20 //bottom margin\n                },\n                \n            };\n            var bunchCurrent = device.bunchCurrent.value;\n            var traceData = [{}];\n            traceData[0] = {x: [],y: [],name: 'bunch Intensity', yaxis: 'y1',type: 'bar',marker: {color: '#575491'}};\n            for (var ii = 0; ii < bunchCurrent[0].length; ++ii)\n            {\n                traceData[0].x[ii] = bunchCurrent[0][ii];\n                traceData[0].y[ii] = bunchCurrent[1][ii];\n            }\n            Plotly.newPlot('bunchPlot', traceData, layout,  {displayModeBar: false, staticPlot: true});\n        }\n        function absPhasePlot()\n        {\n            var layout =\n            {   \n                title: \n                {\n                    text : 'Absolute Phase',\n                    font : {size : titleFontSize}\n                },\n                showlegend: false,\n                xaxis: {title: 'Bunch Number'},\n                yaxis: {title: 'Phase (deg)'},\n                height: plotHeight,\n                margin: \n                    {\n                        t: topMarginSize, //top margin\n    //                    l: 0, //left margin\n    //                    r: 0, //right margin\n    //                    b: 20 //bottom margin\n                    }\n                \n            };\n            var phase = device.phase.value;\n            var traceData = [{}];\n            traceData[0] = {x: [],y: [],name: 'abs phase', yaxis: 'y1',type: 'bar',marker: {color: '#575491'}};\n            for (var ii = 0; ii < phase[0].length; ++ii)\n            {\n                traceData[0].x[ii] = phase[0][ii];\n                traceData[0].y[ii] = phase[1][ii];\n            }\n            Plotly.newPlot('absPhasePlot', traceData, layout, {displayModeBar: false, staticPlot: true});\n        }\n        function updateModeEvPlot()\n        {\n            var plotableMode = false;\n            for (var imode = 0; imode < modesToPlot.length; ++imode)\n            {\n                if (modesToPlot[imode] > -1) plotableMode = true;\n            }\n            if (!plotableMode) return;\n            $('#refreshModePlot').show();\n\n            var modeM = device.modeM.value;\n//            var xtime = (new Date().getTime() - plotStart.getTime()) / 1000;\n            var xtime = new Date().getTime();\n            for (var imode = 0; imode < modesToPlot.length; ++imode)\n            {\n                if (modesToPlot[imode] > -1)\n                {\n                    modeEvTraceData[imode].x.push(xtime);\n                    modeEvTraceData[imode].y.push(modeM[1][modesToPlot[imode]]);\n                }\n            }\n            if (modeEvTraceData[0].x.length > 1000)\n            {\n                for (var imode = 0; imode < modesToPlot.length; ++imode)\n                {\n                    if (modesToPlot[imode] > -1)\n                    {\n                        modeEvTraceData[imode].x.splice(0,1);\n                        modeEvTraceData[imode].y.splice(0,1);\n                    }\n                }\n            }\n            Plotly.newPlot('modeEvPlot', modeEvTraceData, modeEvLayout, {displayModeBar: false, staticPlot: true});\n        }\n        function initModeEvPlot()\n        {\n            $('#refreshModePlot').hide();\n            \n            for (var imode = 0; imode < modesToPlot.length; ++imode)\n            {\n                if (modesToPlot[imode] > -1)\n                {\n                    modeEvTraceData[imode] = \n                    {\n                        x: [],\n                        y: [],\n                        name: 'Mode ' + modesToPlot[imode].toString(), \n                        yaxis: 'y1',\n                        type: 'scatter',\n//                        mode: 'lines',\n//                        line: {color: modesToPlotColor[imode]}\n                        mode: 'markers',\n                        marker : \n                        {\n                            color: modesToPlotColor[imode],\n                            symbol: modesToPlotMarker[imode],\n                            size: 10\n                        }\n                    };\n                }\n                else\n                {\n                    modeEvTraceData[imode] = {};\n                }\n            }\n            var ymax = device.maxDipoleModeAmp.alarm.limits.high;\n            var yscale = Math.floor(Math.log10(ymax)) + 1;\n            modeEvLayout =\n            {   \n                title: \n                {\n                    text : 'Mode Evolution',\n                    font : {size : titleFontSize}\n                },\n                showlegend: true,\n                legend:\n                {\n                    x: 0,\n                    y: 1, \n                    xanchor: 'left',\n                    \"orientation\": \"h\"\n                },\n                xaxis: \n                {   \n    //                title: 'Time (sec)'\n                    type: 'date'\n                    \n                },\n                yaxis: \n                {\n                    title: 'Mode Amplitude (deg)',\n                    type: 'log', \n                    range: [-1,yscale]\n                },\n                shapes : \n                [\n                    {\n                        type: 'rect',\n                        xref: 'paper',\n                        x0: 0,\n                        x1: 1,\n                        yref: 'y',\n                        y0: ymax,\n                        y1: ymax + .1,\n                        line: { width: 0},\n                        fillcolor: 'red'\n                    }\n                ],\n                height: plotHeight,\n                margin: \n                    {\n                        t: topMarginSize, //top margin\n    //                    l: 0, //left margin\n    //                    r: 0, //right margin\n    //                    b: 20 //bottom margin\n                    },\n            };\n         }\n        function changeModeDisplay(itrace)\n        {\n            $( \"#editDeviceDialog\" ).dialog( \"option\", \"title\", \"Edit\"); \n            $( \"#editModeEvTraceDialogAttribute\").html('Trace ' + (itrace + 1).toString());\n            modeDisplayEditName = modeDisplayAttrName[itrace];\n\n            $( \"#modeEvTraceNumber\").val(modesToPlot[itrace]);\n\n            $( \"#editModeEvTraceDialog\" ).dialog( \"open\" );\n        }\n// Edit Temp JavaScript\n       $( function() \n        {\n            $( \"#editModeEvTraceDialog\" ).dialog(\n                {\n//                    closeOnEscape: false,\n//                    open: function(event, ui) {$(\".ui-dialog-titlebar-close\", ui.dialog | ui).hide();},\n                    width:    640,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Set\",\n                            click: function() {setModeEvTraceNumber(); $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        }\n                    ]\n                });\n        } );\n        function setModeEvTraceNumber()\n        {\n            if (isNaN( $('#modeEvTraceNumber').val()) )\n            {\n                acknowledgeDialog('Error', 'Entry not a number!', modeDisplayEditName);\n                return;\n            }\n            var plotIndex = -1;\n            if (modeDisplayEditName == modeDisplayAttrName[0]) plotIndex = 0;\n            if (modeDisplayEditName == modeDisplayAttrName[1]) plotIndex = 1;\n            if (modeDisplayEditName == modeDisplayAttrName[2]) plotIndex = 2;\n            if (modeDisplayEditName == modeDisplayAttrName[3]) plotIndex = 3;\n            modesToPlot[plotIndex]  = Number($('#modeEvTraceNumber').val());\n        }\n        \n",
        "output": "str",
        "x": 710,
        "y": 1280,
        "wires": [
            [
                "75e22b3bbf22b956"
            ]
        ]
    },
    {
        "id": "37f67f6f40e574c0",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "javascript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "{{{payload.script.global}}}\n{{{payload.script.user}}}\n",
        "output": "str",
        "x": 700,
        "y": 1360,
        "wires": [
            [
                "d7538dc498b23ee8"
            ]
        ]
    },
    {
        "id": "7ab26775c4ce9224",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "{{{payload.html.dashboard}}}\n    <div width=\"100%\">\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.user}}}\n            </div>\n        </div>\n    </div>",
        "output": "str",
        "x": 1010,
        "y": 1400,
        "wires": [
            [
                "570704c3d0b1fbbb"
            ]
        ]
    },
    {
        "id": "ea47268cb4c049ad",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "html.wifimon",
        "field": "payload.html.wifimon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n                <div class='card'>\n                    <p class='card-title'>WiFi Connection</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Device Update</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <img src='/img/heartRed.png' id='heartBeatID' width='100px' height='100px'/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Signal Level (dBm)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='signalLevelId' >-100</span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Link Quality (/70)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='linkQualityId' >-1</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 1030,
        "y": 1360,
        "wires": [
            [
                "7ab26775c4ce9224"
            ]
        ]
    },
    {
        "id": "d7538dc498b23ee8",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "html.dashboard",
        "field": "payload.html.dashboard",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div width='100%' style='padding-bottom: 25px;'>\n        <table  width='100%'>\n            <tr>\n                <td  width='100%'>\n                    <div class='card'>\n                        <div class='card-body' style=\"padding-bottom:10px;\">\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' align=\"left\">\n                                        <span class=\"tableHeading big-text\">RF Current (mA)</span>\n                                    </td>\n                                    <td width='40%' align=\"right\">\n                                        <span class=\"card-title\" style=\"color:white;\" id=\"beamCurrent\"></span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' align=\"left\">\n                                        <span class=\"tableHeading big-text\">Max Mode</span>\n                                    </td>\n                                    <td width='40%' align=\"right\">\n                                        <span class=\"card-title\" style=\"color:white;\" id=\"maxMode\"></span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' align=\"left\">\n                                        <span class=\"tableHeading big-text\">Mode Amp (deg)</span>\n                                    </td>\n                                    <td width='40%' align=\"right\">\n                                        <span class=\"card-title\" style=\"color:white;\" id=\"modeAmplitude\"></span>\n                                    </td>\n                                 </tr>\n                            </table>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td  width='100%'>\n                    <div class='card'  id='modeSpectrumCard'>\n                        <div class='card-body' id='modeSpectrumCardBody'>\n                            <div id=\"modePlot\"></div>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div class='card'>\n                        <div class='card-body'>\n                            <div id=\"bunchPlot\"></div>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div class='card'>\n                        <div class='card-body'>\n                            <div id=\"modeEvPlot\"></div>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div class='card'>\n                        <div class='card-body'>\n                            <table width='100%' id='modeEvTable'>\n                                <tr>\n                                    <td align=\"center\" width='20%'>\n                                        <span class=\"tableHeading\" style=\"font-size: 30px;\">Tr 1</span>\n                                    </td>\n                                    <td align=\"center\" width='20%'>\n                                        <span class=\"tableHeading\" style=\"font-size: 30px;\">Tr 2</span>\n                                    </td>\n                                    <td align=\"center\" width='20%'>\n                                        <span class=\"tableHeading\" style=\"font-size: 30px;\">Tr 3</span>\n                                    </td>\n                                    <td align=\"center\" width='20%'>\n                                        <span class=\"tableHeading\" style=\"font-size: 30px;\">Tr 4</span>\n                                    </td>\n                                    <td align=\"center\" width='20%'>\n                                    </td>\n                                </tr>\n            \n                                  <tr>\n                                    <td align=\"center\">\n                                        <button class='btn btn-block card-button big-text' id=\"modeDisplayA\" onclick=\"changeModeDisplay(0)\" >-1</button>\n                                    </td>\n                                    <td align=\"center\">\n                                        <button class='btn btn-block card-button big-text' id=\"modeDisplayB\" onclick=\"changeModeDisplay(1)\" >-1</button>\n                                    </td>\n                                    <td align=\"center\">\n                                        <button class='btn btn-block card-button big-text' id=\"modeDisplayC\" onclick=\"changeModeDisplay(2)\" >-1</button>\n                                    </td>\n                                    <td align=\"center\">\n                                        <button class='btn btn-block card-button big-text' id=\"modeDisplayD\" onclick=\"changeModeDisplay(3)\" >-1</button>\n                                    </td>\n                                    <td align=\"center\">\n                                        <button width=100% class=\"btn jumbotron-button big-text\" id=\"refreshModePlot\" type=\"button\" onclick=\"initModeEvPlot()\">Refresh</button>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n            <tr>\n                <td>\n                    <div class='card' id='phaseCard'>\n                        <div class='card-body' id='phaseCardBody'>\n                            <div id=\"phasePlot\"></div>\n                        </div>\n                    </div>\n                </td>\n            </tr>\n        </table>\n    </div>\n    <div id=\"editModeEvTraceDialog\" title=\"Change Trace\" class='card'>\n        <p class=\"tableHeading\" style=\"font-size: 30px;\" id='editModeEvTraceDialogAttribute'>Attribute</p>\n        <div class='card-body'>\n            <table>\n                <tr>\n                    <td width=\"50%\" align=\"left\"><span class=\"tableHeading tableText\">Mode</span></td>\n                    <td width=\"50%\" align=\"right\"><input class=\"form-control tableText\" id=\"modeEvTraceNumber\" type=\"text\" value=\"0\" /></td>\n                </tr>\n            </table>\n        </div>\n    </div>    \n",
        "output": "str",
        "x": 1040,
        "y": 1280,
        "wires": [
            [
                "f73997ef8087050e"
            ]
        ]
    },
    {
        "id": "f73997ef8087050e",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "html.user",
        "field": "payload.html.user",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "                <div class='card' id='userCardId'>\n                    <div class='card-body' align=\"center\">\n                        <table width=\"100%\">\n                            <tr>\n                                <td  align=\"left\">\n                                     <span class='card-text' style='color:black;'>User:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='usernameId'></span>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td  align=\"left\">\n                                    <span class='card-text' style='color:black;'>Time left:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='expTimeId'></span>\n                                </td>\n                            </tr>\n                        </table>\n                        <table width=\"100%\">\n                            <tr>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"renew()\" >Renew</button>\n                                </td>\n                                <td width=\"10%\"></td>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"logout()\" >Logout</button>\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 1020,
        "y": 1320,
        "wires": [
            [
                "ea47268cb4c049ad"
            ]
        ]
    },
    {
        "id": "75e22b3bbf22b956",
        "type": "template",
        "z": "8475ab9.3d26058",
        "name": "script.user",
        "field": "payload.script.user",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        function getCreds()\n        {\n            var now = new Date().getTime();\n            var expDate = Number(getCookie('ExpDate'));\n            if (expDate > 0)\n            {\n                expDate = expDate - now;\n                if(expDate < 0)\n                {\n                    logout();\n                }\n                else\n                {\n                    var hours = Math.floor(expDate / 3600000);\n                    var minutes = expDate - hours * 3600000;\n                    minutes = Math.floor(minutes / 60000);\n                    var seconds = expDate - (hours * 3600000) - (minutes * 60000);\n                    seconds = Math.floor(seconds / 1000);\n                    hours = hours.toString();\n                    if (hours.length == 1) hours = '0' + hours; \n                    minutes = minutes.toString();\n                    if (minutes.length == 1) minutes = '0' + minutes; \n                    seconds = seconds.toString();\n                    if (seconds.length == 1) seconds = '0' + seconds; \n                    var timeString = hours + ':' + minutes + ':' + seconds;\n                    $('#usernameId').text(getCookie('Username'));\n                    $('#expTimeId').text(timeString);\n                }\n            }\n            else\n            {\n                $('#usernameId').text(getCookie('Username'));\n                $('#expTimeId').text('Forever');\n            }\n        }\n        function logout()\n        {\n            document.cookie = project + \"Role= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"ExpDate= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"Username= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            window.location.href = \"/\";\n        }\n        function renew()\n        {\n            var actionMsg = {};\n            sendActionMsg('renew', 'renew', actionMsg);\n        }\n        function updateCookie(msg)\n        {\n            document.cookie = project + \"Role=\" + msg.role;\n            document.cookie = project + \"ExpDate=\" + msg.expDate;\n            document.cookie = project + \"Username=\" + msg.username;\n        }\n        function downloadToken()\n        {\n            downloadString(getCookie(\"Role\"), \"text/plain\", project + \"-token.txt\");\n        }\n// from https://gist.github.com/danallison/3ec9d5314788b337b682\n        function downloadString(text, fileType, fileName) \n        {\n            var blob = new Blob([text], { type: fileType });\n            \n            var a = document.createElement('a');\n            a.download = fileName;\n            a.href = URL.createObjectURL(blob);\n            a.dataset.downloadurl = [fileType, a.download, a.href].join(':');\n            a.style.display = \"none\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);\n        }",
        "output": "str",
        "x": 710,
        "y": 1320,
        "wires": [
            [
                "37f67f6f40e574c0"
            ]
        ]
    }
]